schema {
  query: RootQueryType
  mutation: RootMutationType
}

type ActionLog {
  content: String
  id: Int
  timestamp: Timestamp
  type: ActionType
  user: User
}

enum ActionType {
  AGENCY_CREATE
  AGENCY_DELETE
  AGENCY_UPDATE
  DIRECTION_CREATE
  DIRECTION_DELETE
  DIRECTION_UPDATE
  DRIVER_CREATE
  DRIVER_DELETE
  DRIVER_UPDATE
  GROUP_CHAT_CREATE
  INSTRUCTION_OFF_ROUTE
  INSTRUCTION_SWITCH_ROUTE
  ORDER_CHANGE
  REPORT_CREATE
  ROUTE_CREATE
  ROUTE_DELETE
  ROUTE_INTERVAL
  ROUTE_UPDATE
  SCHEDULE_CREATE
  SCHEDULE_DELETE
  SCHEDULE_SYNCHRONIZE
  SCHEDULE_UPDATE
  STOP_CREATE
  STOP_DELETE
  STOP_UPDATE
  USER_CREATE
  USER_DELETE
  USER_UPDATE
  VEHICLE_CREATE
  VEHICLE_DELETE
  VEHICLE_UPDATE
}

type Agency {
  address: String
  adminsCount: Int
  city: City
  deactivationTimestamp: Timestamp
  dispatchersCount: Int
  driversCount: Int
  email: String
  expireDate: Date
  id: UUID
  isActive: Boolean
  name: String
  phone: Int
  routesCount: Int
  vehiclesCount: Int
}

enum ArchiveObjectType {
  AGENCY
  DRIVER
  ROUTE
  ROUTE_DIRECTION
  SCHEDULE
  STOP
  USER
  VEHICLE
}

type ArchiveRecord {
  id: String
  insertedAt: Timestamp
  linkedObjectName: String
  name: String
  objectType: ArchiveObjectType
  userLogin: String
}

type ArchiveRoute {
  agency: Agency
  allowedDeviation: Int
  city: City
  directions: [RouteDirection!]
  id: Int
  name: String
  nameEn: String
  parkingTime: Int
  schedules: [Schedule!]
  shortName: String
  transportClass: [VehicleSize!]
  transportType: VehicleType
}

type AskApiVehicle {
  course: Float
  id: String
  ll: [Float!]
  model: String
  speed: Float
  statenum: String
  time: Timestamp
}

type Attachment {
  aspectRatio: Float
  contentType: String
  id: UUID
  name: String
  url: String
}

enum AvaliableReports {
  COMPLETE_MOVEMENT
  COMPLETE_TRIPS
  DAILY_TRIPS
  DISPATCHING
  MILEAGE_BY_ROUTES
  ORDER_DIST_TIMES
  ROUDTRIPS_WORKLOAD
  ROUTE_WORK_END
  ROUTE_WORKLOAD
  TRIPS_BY_DATE_WORKLOAD
  VEHICLES_DATA
}

type Avatar {
  aspectRatio: Float
  contentType: String
  id: UUID
  name: String
  url: String
}

type Camera {
  address: String
  coords: [Float!]
  expire: Timestamp
  id: UUID
  name: String
  url: String
}

type Chat {
  driver: Driver
  lastMessage: Message
  messagesGroup: MessagesGroup
  type: MessageType
}

type City {
  id: Int
  name: String
}

type Contract {
  agency: Agency
  city: City
  endDate: Date
  id: Int
  name: String
  routes: [Route!]
  routesCount: Int
  startDate: Date
}

enum CorrectionType {
  ORDER
  ROUTE
  STOP
  TRIP
}

"""Date in ISO 8601 format(YYYY-MM-DD)"""
scalar Date

enum DayOfWeek {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

type DictFile {
  content: String
  name: String
}

type Driver {
  agency: Agency
  agencyId: UUID
  allowedVehiclesTypes: [VehicleType!]
  authCode: String
  avatar: Avatar
  avatarId: UUID
  drivingLicenseNumber: String
  email: String
  firstName: String
  id: Int
  lastName: String
  middleName: String
  phone: String
  workload: [[Int!]!]
}

type DriverRoute {
  name: String
  rId: Int
  shortName: String
}

type DriverSession {
  driver: DriverSimplified
  expireAt: Timestamp
  refreshToken: String
  token: String
}

type DriverSimplified {
  agency: Agency
  allowedVehiclesTypes: [VehicleType!]
  avatar: Avatar
  drivingLicenseNumber: String
  email: String
  firstName: String
  id: Int
  lastName: String
  middleName: String
  phone: String
}

type DriverStoptime {
  arrivalTimestamp: Timestamp!
  coords: [Float!]!
  departureTimestamp: Timestamp!
  isTraveled: Boolean!

  """Do you need it?"""
  radius: Float!
  stopId: Int!
  stopName: String!

  """amount in seconds"""
  waitingTime: Int!
}

type DriverTrip {
  endTimestamp: Timestamp
  firsStopName: String
  id: Int!
  lastStopName: String
  lastTraveledStopId: Int
  normalizedShapeDist: Float
  route: DriverRoute!

  """[[lon1, lat1!], [lon2, lat2!], ...!]"""
  shape: [[Float!]!]!
  shapeDist: Float
  startTimestamp: Timestamp
  stoptimes: [DriverStoptime!]!
  waitingTime: Int
}

type File {
  content: String
  name: String
}

type Instruction {
  id: Int
  instruction: InstructionBody
  tripExecutionId: Int
}

type InstructionBody {
  offRoute: OffRouteInstruction
  offRouteAndSet: OffRouteAndSetInstruction
  setVehicle: SetVehicleInstruction
  switchRoute: SwitchRouteInstruction
  type: InstructionType
}

input InstructionInput {
  offRoute: OffRouteInstructionInput
  offRouteAndSet: OffRouteAndSetInstructionInput
  setVehicle: SetVehicleInstructionInput
  switchRoute: SwitchRouteInstructionInput
  type: InstructionType!
}

type InstructionOrder {
  endTime: Int
  id: Int
  startTime: Int
  title: String
}

type InstructionRoute {
  id: Int
  name: String
  shortName: String
}

type InstructionTrip {
  endTime: Int
  id: Int
  startTime: Int
  title: String
}

enum InstructionType {
  OFF_ROUTE
  OFF_ROUTE_AND_SET
  SET_VEHICLE
  SWITCH_ROUTE
}

"""JSON scalar"""
scalar JSON

enum LocationType {
  BOARDING_AREA
  ENTRANCE
  NODE
  RAILWAY_STATION
  STATION
  STOP
}

type Message {
  """Might be text or base64 wav audio, based on content_type"""
  content: String
  contentType: MessageContentType
  id: Int
  timestamp: Timestamp
}

enum MessageContentType {
  AUDIO
  TEXT
}

type MessagesAudio {
  content: String
  description: String
  id: Int
}

type MessagesGroup {
  drivers: [Driver!]
  id: Int
  name: String
}

type MessagesRoute {
  id: Int
  name: String
  shortName: String
}

enum MessageType {
  GROUP
  PERSONAL
}

enum NetworkOrderChangeType {
  ORDER_CREATE
  ORDER_UPDATE_NAME
  TRIP_CREATE
  TRIP_DELETE
  TRIP_UPDATE_STOPTIMES
  TRIP_UPDATE_WAITING_TIME
  TRIP_UPDATE_WAITING_TYPE
}

enum NetworkRouteChangeType {
  ROUTE_COPY
  ROUTE_COPY_TO_ARCHIVE
  ROUTE_CREATE
  ROUTE_DELETE
  ROUTE_DIRECTION_DELETE
  ROUTE_SCHEDULE_DELETE
  ROUTE_SCHEDULE_SET_IS_ACTIVE
  ROUTE_UPDATE_AGENCY
  ROUTE_UPDATE_ALLOWED_DEVIATION
  ROUTE_UPDATE_CITY
  ROUTE_UPDATE_LONG_NAME
  ROUTE_UPDATE_PARKING_TIME
  ROUTE_UPDATE_SHORT_NAME
  ROUTE_UPDATE_TRANSPORT_CLASS
  ROUTE_UPDATE_TRANSPORT_TYPE
}

enum NetworkRouteDirectionChangeType {
  ROUTE_DIRECTION_COPY
  ROUTE_DIRECTION_COPY_TO_ARCHIVE
  ROUTE_DIRECTION_CREATE
  ROUTE_DIRECTION_CREATE_STOPTIME
  ROUTE_DIRECTION_DELETE_STOPTIME
  ROUTE_DIRECTION_UPDATE
  ROUTE_DIRECTION_UPDATE_END_DATE
  ROUTE_DIRECTION_UPDATE_IS_LOCKED
  ROUTE_DIRECTION_UPDATE_NAME
  ROUTE_DIRECTION_UPDATE_PLAN_TIME
  ROUTE_DIRECTION_UPDATE_START_DATE
  ROUTE_DIRECTION_UPDATE_STOPTIME_SHAPE_ID
  ROUTE_DIRECTION_UPDATE_STOPTIME_SHAPE_PATH
  ROUTE_DIRECTION_UPDATE_STOPTIME_SHAPE_PIVOT_AND_PATH
  ROUTE_DIRECTION_UPDATE_STOPTIME_SHAPE_PIVOT_POINTS
  ROUTE_DIRECTION_UPDATE_STOPTIME_STOP_ID
  ROUTE_DIRECTION_UPDATE_STOPTIME_TRAVEL_TIME
}

enum NetworkScheduleChangeType {
  ORDER_DELETE
  ORDER_GENERATE
  SCHEDULE_COPY
  SCHEDULE_COPY_TO_ARCHIVE
  SCHEDULE_CREATE
  SCHEDULE_GENERATE_TRIPS
  SCHEDULE_UPDATE_ACTIVITY_DAYS
  SCHEDULE_UPDATE_BACK_DIRECTION
  SCHEDULE_UPDATE_BACK_PARKING_TIME
  SCHEDULE_UPDATE_END_DATE
  SCHEDULE_UPDATE_END_TIME
  SCHEDULE_UPDATE_EXCEPT_HOLIDAYS
  SCHEDULE_UPDATE_EXCEPTION_DATES
  SCHEDULE_UPDATE_FORWARD_DIRECTION
  SCHEDULE_UPDATE_INTERVAL
  SCHEDULE_UPDATE_INTERVAL_TYPE
  SCHEDULE_UPDATE_NAME
  SCHEDULE_UPDATE_ORDERS_AMOUNT
  SCHEDULE_UPDATE_PARKING_TIME
  SCHEDULE_UPDATE_ROUND_TRIPS_PER_ORDER_AMOUNT
  SCHEDULE_UPDATE_START_DATE
  SCHEDULE_UPDATE_START_TIME
  SCHEDULE_UPDATE_TRIPS_INTERALS
  SCHEDULE_UPDATE_TYPE
}

enum NetworkStopChangeType {
  STOP_COPY
  STOP_CREATE
  STOP_DELETE
  STOP_DELETE_MULTIPLE
  STOP_SET_CITY_ID_MULTIPLE
  STOP_UPDATE_CITY
  STOP_UPDATE_COORDS
  STOP_UPDATE_DATE
  STOP_UPDATE_IS_SERVICE
  STOP_UPDATE_LOCATION_TYPE
  STOP_UPDATE_NAME
  STOP_UPDATE_REVERSE_DIRECTION_STOP
  STOP_UPDATE_ZONE
}

type NetworkVersion {
  id: Int
  insertedAt: Timestamp
  isActive: Boolean
  name: String
}

type Objects {
  agency: Agency
  driver: Driver
  id: String
  route: ArchiveRoute
  routeDirection: RouteDirection
  schedule: Schedule
  stop: Stop
  user: User
  vehicle: Vehicle
}

enum OffRouteAction {
  GOTO_AGENCY
  WAIT
}

type OffRouteAndSetInstruction {
  action: OffRouteAction
  fromStopId: Int
  newOrderId: Int
  newStartTripId: Int
  newVehicleId: Int
  reason: OffRouteReason
  targetOrderId: Int
  targetTripId: Int
}

input OffRouteAndSetInstructionInput {
  action: OffRouteAction
  fromStopId: Int!
  newVehicleId: Int
  reason: OffRouteReason
  targetTripId: Int!
}

type OffRouteInstruction {
  action: OffRouteAction
  reason: OffRouteReason
}

input OffRouteInstructionInput {
  action: OffRouteAction
  reason: OffRouteReason
}

enum OffRouteReason {
  ACCIDENT
  DRIVER_TROUBLE
  EMERGENCY
  MALFUNCTION
}

type Order {
  id: Int
  name: String
  schedule: Schedule
  scheduleId: Int
  trips: [Trip!]
}

enum OrderDirection {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

type PublicAgency {
  id: String
  name: String
}

type PublicDirection {
  shape: [[Float!]!]
  stops: [PublicStop!]
}

type PublicRoute {
  agencyId: String
  agencyName: String

  """only for publicRouteDetailsGet"""
  back: PublicDirection

  """only for publicRouteDetailsGet"""
  forward: PublicDirection
  id: Int
  name: String

  """depr"""
  shape: [[Float!]!]
  shortName: String

  """depr"""
  stops: [PublicStop!]
}

type PublicRouteStopArrivals {
  expectedArrival: Timestamp
  planArrival: Timestamp
  vehicleId: Int
  vehicleRegistrationNumber: String
}

type PublicScheduleRoute {
  arrivalTime: Int
  id: Int
  name: String
  shortName: String
}

type PublicShape {
  executionsIds: [Int!]
  path: [[Float!]!]!
  routeShortName: String
  stops: [PublicStop!]
}

type PublicStop {
  """only for publicTrip"""
  arrivalTime: Int
  coords: [Float!]
  id: Int

  """only for publicTrip"""
  isTraveled: Boolean
  name: String
  nameEn: String

  """only for publicTrip"""
  normalizedShapeDist: Float

  """only for publicTrip"""
  shapeDist: Float
  wheelchairBoarding: Boolean
}

type PublicStopArrivalForecast {
  arrivals: [PublicRouteStopArrivals!]
  routeId: Int
  routeShortName: String
}

type PublicTrip {
  id: Int
  shape: [[Float!]!]
  stops: [PublicStop!]
}

type PublicVehicle {
  agencyId: String
  agencyName: String
  bearing: Float
  boardNumber: String
  coords: [Float!]
  distanceToLine: Float
  id: Int
  normalizedShapeDist: Float
  registrationNumber: String
  routeId: Int
  shapeDist: Float
  timestamp: Timestamp
  tripDirection: TripDirection
  tripId: Int
  type: VehicleType
  wheelchairBoarding: WheelchairBoarding
}

type RealtimeOrder {
  acceptedTripsAmount: Int
  activeTrip: RealtimeTrip
  activeTripId: Int
  currentTripNumber: Int
  driver: Driver
  endTime: Int
  finishedTripsAmount: Int
  id: Int
  instructions: [Instruction!]

  """deprecated"""
  lastStopDeviation: Int
  name: String

  """deprecated"""
  nextStopDeviation: Int
  startTime: Int
  trips: [RealtimeTrip!]
  tripsAmount: Int
  vehicle: Vehicle
}

type RealtimeOrderDirection {
  id: Int
  name: String
}

type RealtimePath {
  coords: [[Float!]!]
  distToShape: [Float!]

  """only exists for realtime_trips_pathes_get"""
  execId: Int

  """only exists for realtime_trips_pathes_get"""
  normalizedShapeDistances: [Float!]

  """only exists for realtime_trips_pathes_get"""
  shapeDistances: [Float!]
  speed: [Float!]
  timestamps: [Timestamp!]
}

type RealtimeRecieverStat {
  agencyName: String
  imei: String
  recieverType: RecieverType
  registrationNumber: String
  timestamp: Timestamp
  vehicleId: Int
}

type RealtimeRoute {
  acceptedTripsAmount: Int
  activeOrdersAmount: Int
  activeVehiclesAmount: Int
  agency: Agency
  city: City
  completedTripsAmount: Int
  id: Int

  """deprecated"""
  intervalSeconds: Int

  """deprecated"""
  isInterval: Boolean
  maxDeviation: Int
  missedLastStopAmount: Int
  missedNextStopAmount: Int
  name: String
  orders: [RealtimeOrder!]

  """deprecated"""
  ordersAmount: Int
  passedTripsAmount: Int
  shortName: String
  totalOrdersAmount: Int
  totalTripsAmount: Int
  totalVehiclesAmount: Int

  """deprecated"""
  vehiclesAmount: Int
}

type RealtimeRoutesStats {
  activeVehicles: Int
  offlineVehicles: Int
  ordersAmount: Int
  tripsAmount: Int
  vehiclesAmount: Int
  waitingVehicles: Int
}

type RealtimeShape {
  executionsIds: [Int!]
  path: [[Float!]!]!
  routeShortName: String
  stops: [RealtimeTripStop!]
}

type RealtimeStopInterval {
  accepted: Boolean
  arrivalDeviation: Int
  comment: RealtimeTripComment
  correction: Int
  departureDeviation: Int
  factArrival: Int
  factDeparture: Int
  factInterval: Int
  intervalDeviation: Int
  orderName: String
  parkingTime: Int
  planArrival: Int
  planDeparture: Int
  planInterval: Int
  registrationNumber: String
  routeShortName: String
  stopIndex: Int
  tripNumber: Int
}

type RealtimeTrip {
  acceptScore: Float
  directionType: TripDirection
  id: Int
  orderId: Int
  path: RealtimePath
  stops: [RealtimeTripStop!]
}

type RealtimeTripComment {
  action: RealtimeTripCommentAction
  reason: RealtimeTripCommentReason
  status: RealtimeTripCommentStatus
}

enum RealtimeTripCommentAction {
  COME_OFF
  LATE
  PARK_RETURN
  SWITCH
  UNDERPRODUCTION
  WAIT
}

input RealtimeTripCommentInput {
  action: RealtimeTripCommentAction
  reason: RealtimeTripCommentReason!
  status: RealtimeTripCommentStatus!
}

enum RealtimeTripCommentReason {
  AGENCY_FAULT
  BO_DEFECT
  DRIVER_FAULT
  EXPLUATATION
  MISS_SCHEDULE
  MISS_SHAPE
  NO_AGENCY_FAOULT
  OTHER
  PS_DAMAGE
  REFUEL
  ROAD_FACTOR
  TECH_DEFECT
  TECH_OPERATION
}

enum RealtimeTripCommentStatus {
  DONE_WITH_VIOLATIONS
  NOT_DONE
}

type RealtimeTripStop {
  accepted: Boolean
  arrivalDeviation: Int
  comment: RealtimeTripComment
  coords: [Float!]
  correction: Int
  departureDeviation: Int
  directionType: TripDirection
  dist: Float
  factArrival: Int
  factDeparture: Int
  id: Int
  name: String
  normDist: Float
  parkingTime: Int
  planArrival: Int
  planDeparture: Int
}

input RealtimeTripStopsUpdateObject {
  accepted: Boolean
  comment: RealtimeTripCommentInput

  """index of stop to be updated"""
  index: Int!
}

type RealtimeVehicle {
  bearing: Float
  boardNumber: String
  distanceToLine: Float
  id: Int
  imei: String
  normalizedShapeDist: Float
  oid: String
  originLl: [Float!]
  registrationNumber: String
  routeId: Int
  shapeDist: Float
  shapeLl: [Float!]
  size: VehicleSize
  speed: Float
  status: RealtimeVehicleStatus
  timestamp: Timestamp
  tripDirection: TripDirection
  tripExecutionId: Int
  type: VehicleType
  wheelchairBoarding: WheelchairBoarding
}

type RealtimeVehicleMeta {
  agency: Agency
  driver: Driver
  tripExecutionId: Int
  vehicle: Vehicle
  vehicleId: Int
}

enum RealtimeVehicleStatus {
  ACTIVE
  NO_CONNECTION
  STAYING
}

enum RecieverType {
  ASK
  EGTS
  WIALON
}

type Report {
  content: String
  name: String
  reportType: AvaliableReports
}

enum ReportParams {
  AGENCIES_IDS
  CITIES_IDS
  DATE
  FROM_DATE
  ROUTES_IDS
  TO_DATE
}

type ReportProperties {
  avaliableParams: [ReportParams!]
  name: String
  type: AvaliableReports
}

type ReportRoute {
  id: Int
  name: String
  shortName: String
}

enum Role {
  AGENCY_ADMIN
  DISPATCHER
  SUPERADMIN
}

type RootMutationType {
  agencyCreate(address: String, cityId: Int, email: String, expireDate: Date, name: String, phone: Int): Agency
  agencyDelete(id: UUID!): Agency
  agencyUpdate(address: String, cityId: Int, email: String, expireDate: Date, id: UUID!, isActive: Boolean, name: String, phone: Int): Agency
  archiveRecordDelete(id: String!): String
  archiveRecordRestore(force: Boolean, id: String!): String

  """Create attachment"""
  attachmentCreate(file: Upload!): Attachment

  """Delete attachment"""
  attachmentDelete(id: UUID!): String

  """Create avatar"""
  avatarCreate(file: Upload!): Avatar

  """Delete avatar"""
  avatarDelete(id: UUID!): String
  brandCreate(name: String!): VehicleBrand
  brandDelete(id: Int!): VehicleBrand
  brandUpdate(id: Int!, name: String): VehicleBrand
  cancelInstruction(id: Int!): String
  cityCreate(name: String!): City
  cityDelete(cityId: Int!): City
  contractAddRoute(contractId: Int!, routeId: Int!): Contract
  contractCreate(agencyId: Int, cityId: Int, endDate: Date, name: String, startDate: Date): Contract
  contractDelete(id: Int!): Contract
  contractDeleteRoute(contractId: Int!, routeId: Int!): Contract
  contractUpdate(agencyId: Int, cityId: Int, endDate: Date, id: Int!, name: String, startDate: Date): Contract
  createOrderChange(changeType: NetworkOrderChangeType!, directionId: Int, id: Int, ids: [Int!], index: Int, name: String, scheduleId: Int, time: Int, type: TripWaitingType): Order
  createRouteChange(agencyId: UUID, allowedDeviation: Int, changeType: NetworkRouteChangeType!, cityId: Int, id: Int, name: String, parkingTime: Int, scheduleIsActive: Boolean, shortName: String, transportClass: [VehicleSize!], transportType: VehicleType): Route
  createRouteDirectionChange(
    changeType: NetworkRouteDirectionChangeType!
    endDate: Date
    id: Int
    index: Int
    isLocked: Boolean
    name: String
    path: [[Float!]!]
    pivotPoints: [[Float!]!]
    planDist: Float
    planTime: Int
    routeId: Int
    shapeId: Int
    shapes: [RouteDirectionShape!]
    startDate: Date
    stopId: Int

    """[[stop_id, arr, dep!], ...!]"""
    stoptimes: [[Int!]!]
    travelTime: Int
  ): RouteDirection
  createScheduleChange(
    activityDays: [DayOfWeek!]
    backDirectionId: Int

    """only for ORDER_GENERATE"""
    backParkingTime: Int
    changeType: NetworkScheduleChangeType!
    directionId: Int
    endDate: Date
    endTime: Int
    exceptHolidays: Boolean
    exceptionDates: [Date!]
    forwardDirectionId: Int
    id: Int
    interval: Int
    intervalType: ScheduleIntervalType
    name: String
    ordersAmount: Int
    parkingTime: Int
    roundTripsPerOrderAmount: Int
    routeId: Int
    startDate: Date
    startTime: Int
    totalRoundTripsAmount: Int
    type: ScheduleType
    updateTripsIntervalsAfterTripId: Int

    """amount of seconds to add to intervals duration"""
    updateTripsIntervalsChangeValue: Int
    updateTripsIntervalsForWholeSchedule: Boolean
  ): Schedule
  createStopChange(changeType: NetworkStopChangeType!, cityId: Int, coords: [Float!], date: Date, id: Int, ids: [Int!], isService: Boolean, locationType: LocationType, name: String, polygon: [[Float!]!], radius: Float, reverseDirectionStopId: Int, zoneType: StopZoneType): Stop
  driverAuthCodeReset(driverId: Int!): String
  driverCreate(agencyId: UUID, allowedVehiclesTypes: [VehicleType!], avatarId: UUID, drivingLicenseNumber: String, email: String, firstName: String, lastName: String, middleName: String, phone: String): Driver
  driverDelete(id: Int!): Driver
  driverSendSensorsData(coords: [Float!]!, speed: Float!, timestamp: Timestamp!): String
  driverSessionCreate(authCode: String!): DriverSession
  driverSessionDelete: String
  driverSessionRefresh(refreshToken: String!): DriverSession
  driverUpdate(agencyId: UUID, allowedVehiclesTypes: [VehicleType!], avatarId: UUID, drivingLicenseNumber: String, email: String, firstName: String, id: Int!, lastName: String, middleName: String, phone: String): Driver
  holidayCreate(date: Date!): Date
  holidayDelete(date: Date!): Date
  importAgenciesFromFile(file: Upload): [Agency!]
  importDriversFromFile(agencyId: UUID!, file: Upload): [Driver!]
  importVehiclesFromFile(agencyId: UUID!, file: Upload): [Vehicle!]
  messageCreate(audioId: Int, content: String, contentType: MessageContentType!, driverId: Int, groupId: Int, type: MessageType!): Message
  messagesGroupCreate(driversIds: [Int!]!, name: String!): MessagesGroup
  modelCreate(brandId: Int!, name: String!): VehicleModel
  modelDelete(id: Int): VehicleModel
  modelUpdate(brandId: Int, id: Int!, name: String): VehicleModel
  networkVersionCreate(name: String!): NetworkVersion
  networkVersionImportGtfs: NetworkVersion
  networkVersionSwitch(versionId: Int): NetworkVersion
  realtimeCreateTrip(
    date: Date!
    directionId: Int!
    orderId: Int!

    """set true for roundtrip"""
    roundtrip: Boolean!
    startTime: Int!
    waitingTime: Int
  ): [RealtimeOrder!]
  realtimeSetCorrection(correction: Int!, stopIndex: Int!, tripExecutionId: Int!, type: CorrectionType!): RealtimeOrder
  realtimeUpdateTripsIntervals(
    afterTripId: Int!

    """amount of seconds to add to intervals duration"""
    changeValue: Int!
    forWholeSchedule: Boolean!
    routeId: Int!
  ): [RealtimeOrder!]
  routeDeleteAgency(routeId: Int!): String
  routeSetAgency(agencyId: UUID!, routeId: Int!): String
  schedulerSetDriver(date: Date!, driverId: Int, orderId: Int!): String
  schedulerSetVehicle(date: Date!, orderId: Int!, vehicleId: Int): String
  schedulerUploadSchedule(xls: Upload!): String
  sendInstruction(currentTimestamp: Timestamp, instruction: InstructionInput!, orderId: Int!): Instruction
  sessionCreate(login: String!, password: String!): UserSession
  sessionDelete: String
  sessionRefresh(refreshToken: String!): UserSession
  shapeCreate(path: [[Float!]!]!, pivotPoints: [[Float!]!]): Shape
  shapeDelete(id: Int!): Shape
  shapeUpdate(id: Int!, path: [[Float!]!]!, pivotPoints: [[Float!]!]): Shape
  syncRoutesSchedules(fromDate: Date!, routesIds: [Int!]!): String

  """deprecated"""
  syncSchedules(fromDate: Date!): String
  undoChange: UndoChangeResult
  undoOrderChange(id: Int!): Order
  undoRouteChange(id: Int!): Route
  undoRouteDirectionChange(id: Int!): RouteDirection
  undoScheduleChange(id: Int!): Schedule
  undoStopChange(id: Int!): Stop
  updateRealtimeTrip(acceptScore: Float!, id: Int!): RealtimeTrip

  """deprecated"""
  updateRealtimeTripStop(
    accepted: Boolean
    comment: RealtimeTripCommentInput
    correction: Int

    """trip id"""
    id: Int!

    """index of stop to be updated"""
    index: Int!
  ): RealtimeTrip
  updateRealtimeTripStops(
    """trip id"""
    id: Int!
    stops: [RealtimeTripStopsUpdateObject!]!
  ): RealtimeTrip
  userAddAgency(agencyId: UUID!, userId: UUID!): User
  userAddCity(cityId: Int!, userId: UUID!): User
  userAddRoute(routeId: Int!, userId: UUID!): User
  userCreate(user: UserInput!): User

  """DEV"""
  userDelete(userId: UUID!): User
  userRemoveAgency(agencyId: UUID!, userId: UUID!): User
  userRemoveCity(cityId: Int!, userId: UUID!): User
  userRemoveRoute(routeId: Int!, userId: UUID!): User
  userSelfUpdate(user: UserSelfUpdateInput!): User
  userUpdate(user: UserUpdateInput!): User
  vehicleCreate(agencyId: UUID, boardNumber: String, hasInfoPanel: Boolean, hasSpeakers: Boolean, imei: String, isActive: Boolean, model: String, oid: String, registrationNumber: String, size: VehicleSize, type: VehicleType, wheelchairBoarding: WheelchairBoarding): Vehicle
  vehicleDelete(id: Int!): Vehicle
  vehicleUpdate(agencyId: UUID, boardNumber: String, hasInfoPanel: Boolean, hasSpeakers: Boolean, id: Int!, imei: String, isActive: Boolean, model: String, oid: String, registrationNumber: String, size: VehicleSize, type: VehicleType, wheelchairBoarding: WheelchairBoarding): Vehicle
  vehiclesXlsOidUpdate(xls: Upload!): String
}

type RootQueryType {
  actionsLogsGet(fromTimestamp: Timestamp, limit: Int, offset: Int, search: String, toTimestamp: Timestamp, types: [ActionType!], usersIds: [String!]): [ActionLog!]
  agenciesDict: DictFile
  agenciesGet(citiesIds: [Int!], ids: [UUID!], limit: Int, offset: Int, orderBy: String, orderDirection: OrderDirection, search: String, withStats: Boolean! = false): [Agency!]
  archiveRecordsGet(fromDate: Date, limit: Int, objectTypes: [ArchiveObjectType!], offset: Int, orderBy: String, orderDirection: OrderDirection, search: String, toDate: Date, usersIds: [String!]): [ArchiveRecord!]
  askApiVehiclesGet(id: String): [AskApiVehicle!]
  brandsGet(ids: [Int!]): [VehicleBrand!]
  cameraById(id: UUID!): Camera
  camerasGet: [Camera!]
  citiesGet(ids: [Int!], limit: Int, offset: Int, search: String): [City!]
  contractsGet(agenciesIds: [UUID!], ids: [Int!], limit: Int, offset: Int, orderBy: String, orderDirection: OrderDirection, search: String): [Contract!]
  dispatchersDict(agenciesIds: [UUID!]): DictFile

  """Get profile"""
  driverGetActiveTrip: DriverTrip
  driverGetByAuthCode(authCode: String!): Driver
  driverGetTrips(ids: [Int!]): [DriverTrip!]!
  driverMessagesGet(limit: Int = 10, offset: Int = 0): [Message!]
  driversDict(agenciesIds: [UUID!]): DictFile
  driversGet(agenciesIds: [UUID!], ids: [Int!], limit: Int, offset: Int, orderBy: String, orderDirection: OrderDirection, search: String): [Driver!]
  getLatestChangeByStopId(stopId: Int!): [ActionLog!]
  getObjectInfo(id: String!): Objects
  holidaysGet(fromDate: Date, toDate: Date): [Date!]
  instructionRoutesGet: [InstructionRoute!]
  instructionsOrdersGet(routeId: Int!): [InstructionOrder!]
  instructionsTripsGet(orderId: Int!): [InstructionTrip!]
  messagesAudioGet: [MessagesAudio!]
  messagesChatsGet(type: MessageType!): [Chat!]
  messagesDriversGet(agenciesIds: [UUID!], routesIds: [Int!]): [Driver!]
  messagesGet(driverId: Int, groupId: Int, limit: Int = 10, offset: Int = 0, type: MessageType!): [Message!]
  messagesRoutesGet(agenciesIds: [UUID!]): [MessagesRoute!]
  modelsGet(ids: [Int!]): [VehicleModel!]
  networkVersionsGet(ids: [Int!], isActive: Boolean, search: String): [NetworkVersion!]
  ordersGet(scheduleId: Int!): [Order!]
  publicAgenciesGet: [PublicAgency!]
  publicRouteDetailsGet(routeId: Int!): PublicRoute
  publicRoutesGet(search: String): [PublicRoute!]
  publicShapesGet(
    routesIds: [Int!]

    """i.e. tripId"""
    tripsExecutionsIds: [Int!]
  ): [PublicShape!]
  publicStopArrivalsForecastGet(stopId: Int!): [PublicStopArrivalForecast!]
  publicStopScheduleGet(stopId: Int!): [PublicScheduleRoute!]
  publicStopsGet(bbox: [[Float!]!], ids: [Int!], limit: Int, offset: Int, search: String): [PublicStop!]
  publicTripGet(tripId: Int!): PublicTrip
  publicVehiclesGet(onRoute: Boolean = true): [PublicVehicle!]
  realtimeGetRouteShapes(currentTimestamp: Timestamp, routeId: Int!): [[[Float!]!]!]
  realtimeOrderDirections(orderId: Int!): [RealtimeOrderDirection!]
  realtimeOrdersTripsGet(currentTimestamp: Timestamp, ordersIds: [Int!]!): [RealtimeTrip!]
  realtimeRecieversStatsGet(search: String): [RealtimeRecieverStat!]
  realtimeRouteGetStops(routeId: Int!): [RealtimeTripStop!]
  realtimeRoutesGet(
    agenciesIds: [String!]
    citiesIds: [Int!]

    """utc timestamp for retro-player"""
    currentTimestamp: Timestamp
    ids: [Int!]
    orderBy: String
    orderDirection: OrderDirection
    search: String
  ): [RealtimeRoute!]
  realtimeRoutesGetStats(currentTimestamp: Timestamp): RealtimeRoutesStats
  realtimeStopIntervals(currentTimestamp: Timestamp, stopId: Int!): [RealtimeStopInterval!]
  realtimeTripsGet(currentTimestamp: Timestamp, tripsIds: [Int!]!): [RealtimeTrip!]
  realtimeTripsPathesGet(currentTimestamp: Timestamp, tripExecutionIds: [Int!]!): [RealtimePath!]
  realtimeUnknownVehiclesGet(currentTimestamp: Timestamp, search: String): [RealtimeVehicle!]
  realtimeVehiclePathGet(
    currentTimestamp: Timestamp
    imei: String

    """
    interval for track in seconds. does not work for queries with trip_execution_id arg
    """
    interval: Int = 3600
    tripExecutionId: Int
    vehicleId: Int
  ): RealtimePath
  realtimeVehiclesGet(currentTimestamp: Timestamp, hasTrip: Boolean, routesIds: [Int!], search: String, vehiclesIds: [Int!]): [RealtimeVehicle!]
  realtimeVehiclesMetaGet(currentTimestamp: Timestamp, executionsIds: [Int!], vehiclesIds: [Int!]): [RealtimeVehicleMeta!]
  realtimeVehiclesShapesGet(currentTimestamp: Timestamp, routesIds: [Int!], tripsExecutionsIds: [Int!]): [RealtimeShape!]

  """Get report"""
  reportGet(agenciesIds: [UUID!], citiesIds: [Int!], date: Date, fromDate: Date, oneSheet: Boolean, routesIds: [Int!], toDate: Date, type: AvaliableReports!): Report

  """returns list of reports"""
  reportsList: [ReportProperties!]
  reportsRoutesGet(date: Date!, search: String): [ReportRoute!]
  roadGet(points: [[Float!]!]): [[[Float!]!]!]
  routesDict(agenciesIds: [UUID!]): DictFile
  routesGet(agenciesIds: [UUID!], citiesIds: [Int!], ids: [Int!], limit: Int = 100, offset: Int = 0, orderBy: String, orderDirection: OrderDirection, search: String, types: [VehicleType!]): [Route!]
  routesGetCsv: File
  routesGetXls: File
  scheduleExistingWaitingsList(scheduleId: Int!): [ScheduleWaiting!]
  scheduleImportLogsGet(limit: Int, offset: Int): [ScheduleImportLog!]
  schedulerDriversWorkloadsGet(date: Date!, routeId: Int, search: String): [Workload!]
  schedulerRoutesGet(date: Date!, ids: [Int!], search: String): [SchedulerRoute!]
  schedulerStopsGet(currentTimestamp: Timestamp, limit: Int, offset: Int = 0): [Stop!]!
  schedulerVehiclesWorkloadsGet(date: Date!, routeId: Int, search: String): [Workload!]
  schedulesGet(ids: [Int!], limit: Int = 100, offset: Int = 0): [Schedule!]
  shapesGet(ids: [Int!], limit: Int = 1000, offset: Int = 0, routeId: Int): [Shape!]
  shapesGetCompact: JSON
  stopsGet(bbox: [[Float!]!], cityIds: [Int!], dates: [Date!], ids: [Int!], isService: Boolean, limit: Int, locationTypes: [LocationType!], offset: Int = 0, orderBy: String, orderDirection: OrderDirection, search: String): [Stop!]!
  stopsGetCsv: File
  stopsGetXls: File
  tripsGet(ids: [Int!], ordersIds: [Int!]): [Trip!]
  usersGet(abilities: [UserAbility!], agenciesIds: [UUID!], citiesIds: [Int!], emails: [String!], ids: [UUID!], limit: Int, offset: Int, orderBy: String, orderDirection: OrderDirection, phones: [Int!], roles: [Role!], routesIds: [Int!], search: String): [User!]
  vehiclesAllowedGet(search: String, vehicleId: Int): [Vehicle!]
  vehiclesDict(agenciesIds: [UUID!]): DictFile
  vehiclesDistinctModelsGet: [String!]
  vehiclesGet(agenciesIds: [UUID!], ids: [Int!], limit: Int, offset: Int, orderBy: String, orderDirection: OrderDirection, search: String): [Vehicle!]
  vehiclesGetCompact: String
  vehiclesLogRoutesGet(limit: Int, offset: Int, search: String, timeEnd: Timestamp!, timeStart: Timestamp!): [Route!]
  vehiclesLogVehiclesGet(limit: Int, offset: Int, routeIds: [Int!], search: String, timeEnd: Timestamp!, timeStart: Timestamp!): [Vehicle!]
  vehiclesLogsGet(routeIds: [Int!], timeEnd: Timestamp!, timeStart: Timestamp!, vehicleIds: [Int!]): [VehicleLogGroup!]
}

type Route {
  agency: Agency
  allowedDeviation: Int
  city: City
  directions: [RouteDirection!]
  id: Int
  name: String
  nameEn: String
  parkingTime: Int
  schedules: [Schedule!]
  shortName: String
  transportClass: [VehicleSize!]
  transportType: VehicleType
  uniqueCode: String
}

type RouteDirection {
  endDate: Date
  id: Int
  isLocked: Boolean
  name: String
  planDist: Float
  planTime: Int
  route: Route
  shapes: [Shape!]
  startDate: Date
  stoptimes: [StopTime!]
}

input RouteDirectionShape {
  id: Int

  """needed if no id provided or shape needs update"""
  path: [[Float!]!]

  """needed if no id provided or shape needs update"""
  pivotPoints: [[Float!]!]
}

type Schedule {
  activityDays: [DayOfWeek!]
  backDirection: RouteDirection
  backParkingTime: Int
  endDate: Date
  endTime: Int
  exceptHolidays: Boolean
  exceptionDates: [Date!]
  forwardDirection: RouteDirection
  id: Int
  interval: Int
  intervalType: ScheduleIntervalType
  isActive: Boolean
  name: String
  orders: [Order!]
  ordersAmount: Int
  parkingTime: Int
  roundTripsPerOrderAmount: Int
  route: Route
  routeId: Int
  startDate: Date
  startTime: Int
  totalRoundTripsAmount: Int
  type: ScheduleType
}

type ScheduleImportLog {
  fromDate: Date
  message: String
  timestamp: Timestamp
  userLogin: String
}

enum ScheduleIntervalType {
  FIXED
  FUZZY
  INTERVAL
}

type SchedulerOrder {
  driver: Driver
  id: Int
  name: String
  trips: [SchedulerTrip!]
  vehicle: Vehicle
}

type SchedulerRoute {
  agency: Agency
  city: City
  date: Date
  id: Int
  name: String
  orders: [SchedulerOrder!]
  ordersAmount: Int
  shortName: String
  uniqueCode: String
  vehicleType: VehicleType
}

type SchedulerTrip {
  directionType: TripDirection
  endTime: Int
  seqNum: Int
  startTime: Int
  waitingTime: Int
}

enum ScheduleType {
  CIRCULAR
  COMPLETE_PENDULUM
  INCOMPLETE_PENDULUM
}

type ScheduleWaiting {
  values: [Int!]
  waitingType: TripWaitingType
}

type SetVehicleInstruction {
  targetOrderId: Int
  targetTripExecutionId: Int
  vehicleId: Int
}

input SetVehicleInstructionInput {
  targetTripExecutionId: Int!
  vehicleId: Int!
}

type Shape {
  id: Int
  path: [[Float!]!]
  pivotPoints: [[Float!]!]
}

type Stop {
  city: City
  coords: [Float!]
  date: Date
  id: Int
  isService: Boolean
  locationType: LocationType
  name: String
  nameEn: String
  polygon: [[Float!]!]
  radius: Float
  reverseDirectionStop: Stop
  stopRoutes: [Route!]
  zoneType: StopZoneType
}

type StopTime {
  arrivalTime: Int
  departureTime: Int
  distTraveled: Float
  index: Int
  normalizedDist: Float
  shapeId: Int
  stop: Stop
  stopId: Int
  travelToNext: Int
}

enum StopZoneType {
  POLYGON
  RADIUS
}

type SwitchRouteInstruction {
  targetOrderId: Int
  targetTripExecutionId: Int
}

input SwitchRouteInstructionInput {
  targetTripExecutionId: Int!
}

"""Unix timestamp"""
scalar Timestamp

type Trip {
  direction: RouteDirection
  directionId: Int
  directionType: TripDirection
  endTime: Int
  id: Int
  order: Order
  orderId: Int
  shapes: [Shape!]
  startTime: Int
  stoptimes: [StopTime!]
  waitingType: TripWaitingType
}

enum TripDirection {
  BACK
  FORWARD
}

enum TripWaitingType {
  DEPARTURE
  LUNCH
  REFUEL
  WAITING
}

type UndoChangeResult {
  route: Route
  stop: Stop
  type: UndoChangeResultType
}

enum UndoChangeResultType {
  ROUTE
  STOP
}

"""Represents an uploaded file."""
scalar Upload

type User {
  abilities: [UserAbility!]
  agencies: [Agency!]
  cities: [City!]
  deactivationTimestamp: Timestamp
  desktopSettings: JSON
  desktopWallpaper: Attachment
  email: String
  firstName: String
  hasAllCities: Boolean
  id: UUID
  insertedAt: Timestamp
  isActive: Boolean
  lastName: String
  login: String
  middleName: String
  phone: Int
  position: String
  role: Role
  routes: [Route!]
}

enum UserAbility {
  AGENCIES
  CONTROL_CENTER
  REALTIME_MAP
  REPORTS
  SCHEDULE
  TRACKING
  TRANSPORT_NETWORK
  USERS
}

input UserInput {
  abilities: [UserAbility!]
  agencyId: UUID
  cityId: Int
  desktopSettings: JSON
  desktopWallpaperId: UUID
  email: String
  firstName: String
  hasAllCities: Boolean
  lastName: String
  login: String
  middleName: String
  password: String
  phone: Int
  position: String
  role: Role
}

input UserSelfUpdateInput {
  desktopSettings: JSON
  desktopWallpaperId: UUID
}

type UserSession {
  expireAt: Timestamp
  refreshToken: String
  token: String
  user: User
}

input UserUpdateInput {
  abilities: [UserAbility!]
  cityId: Int
  desktopSettings: JSON
  desktopWallpaperId: UUID
  email: String
  firstName: String
  hasAllCities: Boolean
  id: UUID!
  isActive: Boolean
  lastName: String
  login: String
  middleName: String
  password: String
  phone: Int
  position: String
  role: Role
}

"""UUID scalar"""
scalar UUID

type Vehicle {
  agency: Agency
  boardNumber: String
  deactivationTimestamp: Timestamp
  hasInfoPanel: Boolean
  hasSpeakers: Boolean
  id: Int
  imei: String
  imeiChanges: [VehicleImeiChange!]
  imeiChanges2: [VehicleImeiChange2!]
  isActive: Boolean
  model: String
  oid: String
  registrationNumber: String
  size: VehicleSize
  type: VehicleType
  wheelchairBoarding: WheelchairBoarding
  workload: [[Int!]!]
}

type VehicleBrand {
  id: Int
  models: [VehicleModel!]
  name: String
  vehicles: [Vehicle!]
}

type VehicleImeiChange {
  after: String
  before: String
  timestamp: Timestamp
  userLogin: String
}

type VehicleImeiChange2 {
  dateEnd: Date
  dateStart: Date
  imei: String
}

type VehicleLog {
  normalizedShapeDist: Float
  originLl: [Float!]
  shapeDist: Float
  shapeLl: [Float!]
  speed: Float
  timestamp: Timestamp
}

type VehicleLogGroup {
  agencyId: String
  agencyName: String
  driverFio: String
  driverId: Int
  executionId: Int
  logs: [VehicleLog!]
  routeId: Int
  routeName: String
  routeShortName: String
  shape: [[Float!]!]
  stops: [RealtimeTripStop!]
  vehicleId: Int
  vehicleRegistrationNumber: String
  vehicleType: VehicleType
}

type VehicleModel {
  brand: VehicleBrand
  id: Int
  name: String
}

enum VehicleSize {
  BIG
  MEDIUM
  SMALL
}

enum VehicleType {
  BUS
  CABLE_CAR
  FAP
  FERRY
  FUNICULAR
  GONDOLA
  METRO
  RAIL
  TRAM
  TROLLEY
  UNKNOWN
}

enum WheelchairBoarding {
  AVAILABLE
  UNAVAILABLE
  UNDEFINED
}

type Workload {
  entityId: Int
  entityName: String

  """from 0 to 1, 'busy line', [[0, 0.01!], [0.02, 0.03!], ...!]"""
  workload: [[Float!]!]
}
