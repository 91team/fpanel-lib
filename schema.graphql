schema {
  query: RootQueryType
  mutation: RootMutationType
}

enum Abilities {
  USERS_CONTROL
}

type Agency {
  agencyName: String
  agencyPhone: Int
  agencyTimezone: String
  agencyUrl: String
  id: UUID
  originAgencyId: String
  originSource: DataSource
}

input AgencyCreateInput {
  agencyName: String
  agencyPhone: Int
  agencyTimezone: String
  agencyUrl: String
}

input AgencyUpdateInput {
  agencyName: String
  agencyPhone: Int
  agencyTimezone: String
  agencyUrl: String
  id: UUID!
}

type Attachment {
  aspectRatio: Float
  contentType: String
  id: UUID
  name: String
  url: String
}

type Avatar {
  aspectRatio: Float
  contentType: String
  id: UUID
  name: String
  url: String
}

type Calendar {
  dates: [CalendarDate]
  endDate: Date
  friday: ExceptionType
  id: Int
  insertedAt: Timestamp
  isActive: Boolean
  monday: ExceptionType
  saturday: ExceptionType
  serviceName: String
  startDate: Date
  sunday: ExceptionType
  thursday: ExceptionType
  trips: [Trip]
  tuesday: ExceptionType
  wednesday: ExceptionType
}

input CalendarCreateInput {
  dates: [CalendarDateInput!]!
  endDate: Date!
  friday: ExceptionType!
  monday: ExceptionType!
  saturday: ExceptionType!
  serviceName: String
  startDate: Date!
  sunday: ExceptionType!
  thursday: ExceptionType!
  tuesday: ExceptionType!
  wednesday: ExceptionType!
}

type CalendarDate {
  date: Date
  exceptionType: ExceptionType
  id: Int
  insertedAt: Timestamp
  isActive: Boolean
}

input CalendarDateInput {
  date: Date
  exceptionType: ExceptionType
}

input CalendarUpdateInput {
  dates: [CalendarDateInput!]
  endDate: Date
  friday: ExceptionType
  id: Int!
  monday: ExceptionType
  saturday: ExceptionType
  serviceName: String
  startDate: Date
  sunday: ExceptionType
  thursday: ExceptionType
  tuesday: ExceptionType
  wednesday: ExceptionType
}

enum DataSource {
  GTFS_SPB
  NATIVE
}

"""Date in ISO 8601 format(YYYY-MM-DD)"""
scalar Date

type Driver {
  agency: Agency
  agencyId: UUID
  allowedVehiclesTypes: [RouteType]
  avatar: Avatar
  avatarId: UUID
  drivingLicenseNumber: String
  email: String
  firstName: String
  id: Int
  lastName: String
  middleName: String
  phone: String
  route: Route
  trips: [Trip]
  vehicle: Vehicle
}

input DriverInput {
  allowedVehiclesTypes: [RouteType]
  avatarId: UUID
  drivingLicenseNumber: String
  email: String
  firstName: String
  lastName: String
  middleName: String
  phone: String
}

input DriverUpdateInput {
  allowedVehiclesTypes: [RouteType]
  avatarId: UUID
  drivingLicenseNumber: String
  email: String
  firstName: String
  id: Int!
  lastName: String
  middleName: String
  phone: String
}

enum ExceptionType {
  AVALIABLE
  UNAVALIABLE
}

enum InstructionType {
  AWAIT
  SLOW_DOWN
  SPEED_UP
}

"""JSON scalar"""
scalar JSON

enum LocationType {
  BOARDING_AREA
  ENTRANCE
  NODE
  RAILWAY_STATION
  STATION
  STOP
}

type NetworkVersion {
  id: Int
  isActive: Boolean
  name: String
  parentVersion: NetworkVersion
}

input NetworkVersionCreateInput {
  name: String
  parentId: Int
}

input NetworkVersionUpdateInput {
  id: Int!
  name: String
}

enum OrderDirection {
  ASC
  DESC
}

type Road {
  access: RoadAccess
  bridge: Boolean
  class: RoadClass
  geometry: [[Float]]
  id: Int
  lanes: Int
  name: String
  oneway: RoadDirection
  osmId: Int
  ref: String
  service: String
  tunnel: Boolean
  type: RoadType
  zOrder: Int
}

enum RoadAccess {
  AGRICULTURAL
  COMMERCIAL
  CUSTOMERS
  DELIVERY
  DESIGNATED
  DESTINATION
  FOOT
  FORESTRY
  ILLEGAL
  NO
  OFFICIAL
  PERMISSIVE
  PERMIT
  PRIVATE
  RESTRICTED
  UNDEFINED
  UNKNOWN
  YES
}

enum RoadClass {
  HIGHWAY
  MAN_MADE
  RAILWAY
}

enum RoadDirection {
  BOTH
  FORWARD
  REVERSE
}

enum RoadType {
  BRIDLEWAY
  CYCLEWAY
  DISUSED
  FOOTWAY
  GROYNE
  LIVING_STREET
  MONORAIL
  MOTORWAY
  MOTORWAY_LINK
  NARROW_GAUGE
  PATH
  PEDESTRIAN
  PIER
  PRESERVED
  PRIMARY
  PRIMARY_LINK
  RACEWAY
  RAIL
  RESIDENTIAL
  ROAD
  SECONDARY
  SECONDARY_LINK
  SERVICE
  STEPS
  SUBWAY
  TERTIARY
  TERTIARY_LINK
  TRACK
  TRAM
  TRUNK
  TRUNK_LINK
  UNCLASSIFIED
}

type Role {
  abilities: [Abilities]
  id: Int
  name: String
  users: [User]
}

input RoleInput {
  abilities: [Abilities]!
  name: String!
}

input RoleUpdateInput {
  abilities: [Abilities]
  id: String!
  name: String
}

type RootMutationType {
  agencyCreate(agency: AgencyCreateInput!): Agency
  agencyDelete(agencyId: UUID!): Agency
  agencyUpdate(agency: AgencyUpdateInput!): Agency

  """Create attachment"""
  attachmentCreate(file: Upload!): Attachment

  """Delete attachment"""
  attachmentDelete(id: UUID!): String

  """Create avatar"""
  avatarCreate(file: Upload!): Avatar

  """Delete avatar"""
  avatarDelete(id: UUID!): String
  brandCreate(name: String!): VehicleBrand
  brandDelete(id: Int!): VehicleBrand
  brandUpdate(id: Int!, name: String): VehicleBrand
  calendarCreate(obj: CalendarCreateInput!): Calendar
  calendarDelete(calendarId: Int): Calendar
  calendarUpdate(obj: CalendarUpdateInput!): Calendar
  driverAuthCodeReset(driverId: Int!): String
  driverCreate(driver: DriverInput!): Driver
  driverDelete(driverId: Int!): Driver
  driverUpdate(driver: DriverUpdateInput!): Driver
  instructionSend(
    instructionType: InstructionType!

    """await interval in seconds"""
    interval: Int
    stopId: Int
    vehicleId: Int!
  ): String
  modelCreate(brandId: Int!, name: String!): VehicleModel
  modelDelete(id: Int): VehicleModel
  modelUpdate(brandId: Int, id: Int!, name: String): VehicleModel
  networkVersionDelete(networkVersionId: Int): NetworkVersion
  networkVersionSwitch(networkVersionId: Int): NetworkVersion
  networkVersionUpdate(obj: NetworkVersionUpdateInput!): NetworkVersion
  networkVersionsCreate(obj: NetworkVersionCreateInput!): NetworkVersion
  roleCreate(role: RoleInput!): Role
  roleUpdate(role: RoleUpdateInput!): Role
  routeCreate(obj: RouteCreateInput!): Route
  routeDelete(id: UUID!): Route
  routeUpdate(obj: RouteUpdateInput!): Route
  sessionCreate(email: String!, password: String!): UserSession
  sessionDelete: String
  sessionRefresh(refreshToken: String!): UserSession
  stopCreate(obj: StopCreateInput!): Stop
  stopDelete(id: Int!): Stop
  stopUpdate(obj: StopUpdateInput!): Stop
  tripCreate(obj: TripCreateInput!): Trip
  tripDelete(id: Int!): Trip
  tripUpdate(obj: TripUpdateInput!): Trip
  userCreate(user: UserInput!): User

  """DEV"""
  userDelete(userId: UUID!): User
  userSelfUpdate(user: UserSelfUpdateInput!): User
  userUpdate(user: UserUpdateInput!): User
  vehicleCreate(vehicle: VehicleCreateInput!): Vehicle
  vehicleDelete(id: Int!): Vehicle
  vehicleUpdate(vehicle: VehicleUpdateInput!): Vehicle
}

type RootQueryType {
  agenciesGet(agenciesNames: [String], ids: [UUID], limit: Int, offset: Int, orderBy: String = "asc", orderDirection: OrderDirection, search: String): [Agency]
  brandsGet(ids: [Int], name: String, names: [String]): [VehicleBrand]
  calendarGet: [Calendar]
  driverGetByAuthCode(authCode: String): Driver
  driversGet(emails: [String], ids: [Int], limit: Int, offset: Int, orderBy: String = "asc", orderDirection: OrderDirection, phones: [Int], search: String): [Driver]
  modelsGet(brandsIds: [Int], ids: [Int], name: String, names: [String]): [VehicleModel]
  networkVersionsGet(ids: [Int!], isActive: Boolean, limit: Int, name: String, offset: Int): [NetworkVersion]
  roadsGet(
    access: [RoadAccess]
    bbox: [[Float]]
    bridge: [Boolean]
    class: [RoadClass]
    ids: [Int]

    """Filter by amount of lanes"""
    lanes: [Int]
    limit: Int = 10
    name: String
    offset: Int = 0
    oneway: [RoadDirection]
    osmIds: [Int]
    tunnel: [Boolean]
    types: [RoadType]
  ): [Road]
  rolesGet(ids: [Int], limit: Int, names: [String], offset: Int, orderBy: String = "asc", orderDirection: OrderDirection): [Role]
  routesGet(agencyIds: [UUID], ids: [Int], isActive: Boolean, routeTypes: [RouteType], search: String): [Route]
  stopsGet(bbox: [[Float]], ids: [Int], isService: Boolean, limit: Int = 10, locationTypes: [LocationType], names: [String], offset: Int = 0, orderBy: String = "asc", orderDirection: OrderDirection, search: String, version: Float): [Stop]
  tripsGet(directions: [TripDirection], fromTime: Int, hasFrequencies: Boolean, ids: [Int], isActive: Boolean, routeIds: [Int], toTime: Int): [Trip]
  usersGet(emails: [String], ids: [UUID], limit: Int, offset: Int, orderBy: String = "asc", orderDirection: OrderDirection, phones: [Int], rolesIds: [Int], search: String): [User]
  vehiclesGet(agenciesIds: [UUID], boardNumbers: [String], driversIds: [Int], ids: [Int], limit: Int, modelsIds: [Int], offset: Int, orderBy: String = "asc", orderDirection: OrderDirection, originIds: [String], originSources: [DataSource], registrationNumbers: [String], search: String): [Vehicle]
}

type Route {
  agency: Agency
  directionName: String
  id: Int
  isActive: Boolean
  routeColor: String
  routeDesc: String
  routeLongName: String
  routeShortName: String
  routeTextColor: String
  routeType: RouteType
  routeUrl: String
  trips: [Trip]
}

input RouteCreateInput {
  """Should be ignored if user doesn't have proper access abilities"""
  agencyId: UUID
  directionName: String
  isActive: Boolean
  routeColor: String
  routeDesc: String
  routeLongName: String!
  routeShortName: String!
  routeTextColor: String
  routeType: RouteType!
  routeUrl: String
}

enum RouteType {
  BUS
  CABLE_CAR
  FERRY
  FUNICULAR
  GONDOLA
  METRO
  RAIL
  TRAM
  TROLLEY
}

input RouteUpdateInput {
  """Should be ignored if user doesn't have proper access abilities"""
  agencyId: UUID
  directionName: String
  id: Int!
  isActive: Boolean
  routeColor: String
  routeDesc: String
  routeLongName: String
  routeShortName: String
  routeTextColor: String
  routeType: RouteType
  routeUrl: String
}

type Shape {
  dist: Float
  id: Int
  path: [[Float]]
}

type Stop {
  agency: Agency
  agencyId: UUID
  coords: [Float]
  id: Int
  isService: Boolean
  locationType: LocationType
  stopName: String
  version: Float
}

input StopCreateInput {
  """Should be ignored if user doesn't have proper access abilities"""
  agencyId: UUID
  coords: [Float]!
  isService: Boolean = false
  locationType: LocationType
  stopName: String!
}

type StopTime {
  arrivalTime: Int
  departureTime: Int
  distTraveled: Float
  shapeId: Int
  stopId: Int
}

input StopUpdateInput {
  """Should be ignored if user doesn't have proper access abilities"""
  agencyId: UUID
  coords: [Float]
  id: Int!
  isService: Boolean = false
  locationType: LocationType
  stopName: String
}

"""Unix timestamp"""
scalar Timestamp

input TrajectoryInput {
  arrivalTime: Int
  coords: [Float]
  departureTime: Int
  stopId: Int

  """
  if type == POINT -> only fill type and coords fields. if type == STOP -> fill type, stop_id, arr and dep times
  """
  type: TrajectoryPointType!
}

enum TrajectoryPointType {
  POINT
  STOP
}

type Trip {
  calendar: Calendar
  calendarDates: [CalendarDate]
  direction: TripDirection
  endTime: Int
  hasFrequencies: Boolean
  headwaySecs: Int
  id: Int
  isActive: Boolean
  route: Route
  serviceId: Int
  shape: Shape
  startTime: Int
  stoptimes: [StopTime]
}

input TripCreateInput {
  direction: TripDirection!
  endTime: Int
  hasFrequencies: Boolean = false
  headwaySecs: Int
  isActive: Boolean = false
  routeId: Int!
  serviceId: Int
  startTime: Int
  trajectory: [TrajectoryInput]
}

enum TripDirection {
  BACK
  FORWARD
}

input TripUpdateInput {
  direction: TripDirection
  endTime: Int
  hasFrequencies: Boolean
  headwaySecs: Int
  id: Int!
  isActive: Boolean
  routeId: Int
  serviceId: Int
  startTime: Int
  trajectory: [TrajectoryInput]
}

"""Represents an uploaded file."""
scalar Upload

type User {
  agency: Agency
  agencyId: UUID
  desktopSettings: JSON
  desktopWallpaper: Attachment
  email: String
  firstName: String
  id: UUID
  lastName: String
  middleName: String
  phone: Int
  role: Role
  roleId: Int
}

input UserInput {
  desktopSettings: JSON
  desktopWallpaperId: UUID
  email: String!
  firstName: String!
  lastName: String!
  middleName: String
  password: String!
  phone: Int
  roleId: Int!
}

input UserSelfUpdateInput {
  desktopSettings: JSON
  desktopWallpaperId: UUID
}

type UserSession {
  expireAt: Timestamp
  refreshToken: String
  token: String
  user: User
}

input UserUpdateInput {
  desktopSettings: JSON
  desktopWallpaperId: UUID
  email: String
  firstName: String
  id: UUID!
  lastName: String
  middleName: String
  password: String
  phone: Int
  roleId: Int
}

"""UUID scalar"""
scalar UUID

type Vehicle {
  agency: Agency
  boardNumber: String
  brand: VehicleBrand
  driver: Driver
  id: Int
  model: VehicleModel
  originId: String
  originSource: DataSource
  registrationNumber: String
}

type VehicleBrand {
  id: Int
  models: [VehicleModel]
  name: String
  vehicles: [Vehicle]
}

input VehicleCreateInput {
  """Should be ignored for any role except SUPERADMIN"""
  agencyId: UUID
  boardNumber: String!
  driverId: Int
  modelId: Int!
  registrationNumber: String!
}

type VehicleModel {
  brand: VehicleBrand
  id: Int
  name: String
  vehicles: [Vehicle]
}

input VehicleUpdateInput {
  agencyId: UUID
  boardNumber: String
  driverId: Int
  id: Int!
  modelId: Int
  registrationNumber: String
}
