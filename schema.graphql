schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Acl {
  etl: EtlAcl
  olap: OlapAcl
  ose: OseAcl
  shared: SharedAcl
}

enum Agg {
  AVG
  COUNT
  MAX
  MEDIAN
  MIN
  SUM
}

enum ArgType {
  ANY_DATE
  ANY_NUMBER
  ANY_STRING
  COL_DATE
  COL_NUMBER
  COL_STRING
  DATE
  NUMBER
  STRING
}

type Attachment {
  aspectRatio: Float
  contentType: String
  id: UUID
  name: String
  url: String
}

type Autocomplete {
  column: Column
  function: Function
  name: String
  type: AutocompleteType
}

enum AutocompleteType {
  COLUMN
  FUNCTION
  KEYWORD
}

enum CaseType {
  CAPITALIZE
  LOWER
  NONE
  UPPER
}

type Change {
  after: String
  before: String
  changeType: ChangeType
  column: Column
  id: Int
  insertedAt: Timestamp
}

input ChangeCaseTypeInput {
  value: CaseType
}

enum ChangeType {
  CHANGE_CASE_TYPE
  CHANGE_CODECS
  CHANGE_DATA_TYPE
  CHANGE_INCLUDE
  CHANGE_POSITION
  CHANGE_TITLE
  CHANGE_WIDTH
  DELETE_COLUMN
  DELETE_COLUMNS
  REMOVE_LETTERS
  REMOVE_NUMBERS
  REMOVE_PUNCTUATION
  TRIM_SPACES
  UNION_COLUMNS
}

type ChatAvatar {
  large: String
  small: String
}

type ChatMessage {
  embed: Json
  messageId: String
  reply: ChatMessage
  replyId: String
  roomId: String
  text: String
  user: ChatUser
  userId: String
}

type ChatOnline {
  id: String
  meta: ChatOnlineMeta
}

type ChatOnlineMeta {
  onlineAt: Int
}

type ChatRoom {
  dialog: Boolean
  lastMessage: ChatMessage
  messageId: String
  metadata: Json
  name: String
  roomId: String
  updatedAt: Int
  user: ChatUser
}

type ChatUser {
  avatar: ChatAvatar
  id: String
  name: String
}

type Codec {
  level: Int
  type: CodecType
}

input CodecInp {
  level: Int
  type: CodecType
}

input CodecInput {
  value: [CodecInp]
}

enum CodecType {
  DELTA
  DOUBLE_DELTA
  GORILLA
  LZ4
  LZ4HC
  NONE
  T64
  ZSTD
}

type Column {
  caseType: CaseType
  changes: [Change]
  codecs: [Codec]
  columnIds: [Int]
  columnName: String
  columnStats: [ColumnStat]
  compressedBytes: Int
  dataType: DataType
  defaultExpr: String
  id: Int
  include: Boolean
  insertedAt: Timestamp
  nullable: Boolean
  originalTitle: String
  position: Int
  removeLetters: Boolean
  removeNumbers: Boolean
  removePunctuation: Boolean
  sourceStepId: Int
  step: Step
  stepIds: [Int]
  title: String
  trimSpaces: Boolean
  uncompressedBytes: Int
  updatedAt: Timestamp
  width: Int
}

type ColumnStat {
  count: Int
  value: String
}

type ConnectedEntities {
  folders: Json
  objects: Json
}

type Connection {
  id: Int
  joinType: JoinType
  leftTableFieldId: String
  leftTableId: Int
  rightTableFieldId: String
  rightTableId: Int
}

type Datasource {
  datasetCode: String
  datasourceProgress: DatasourceProgress
  datasourceState: DatasourceState
  dbParams: DbParams
  eisParams: EisParams
  id: Int
  link: String
  locked: Boolean
  object: Object
  periodicityType: PeriodicityType
  periodicityValue: Float
  sourceType: SourceType
  steps: [Step]
  title: String
}

type DatasourceProgress {
  datasourceId: Int
  doneDate: Timestamp
  futureStartDate: Timestamp
  processes: [Progress]
  startDate: Timestamp
  status: ProgressStatus
  stopDate: Timestamp
}

type DatasourceState {
  allCount: Int
  currentSubsource: String
  datasourceId: Int
  doneCount: Int
}

enum DataType {
  DATE
  DATETIME
  ENUM
  FLOAT32
  FLOAT64
  INT16
  INT32
  INT64
  INT8
  STRING
  STRING_N
  UINT16
  UINT32
  UINT64
  UINT8
  UUID
}

input DataTypeInput {
  value: DataType
}

type DataValue {
  agg: Agg
  columnId: Int
  fieldId: String
  filter: [FormulaToken]
  groupFieldId: String
  tableId: Int
  title: String
}

input DataValueInput {
  agg: Agg
  columnId: Int
  fieldId: String
  filter: [FormulaTokenInput]
  groupFieldId: String
  tableId: Int
  title: String
}

type DbParams {
  db: String
  dbType: DbType
  host: String
  pass: String
  port: String
  tables: [DbTable]
  user: String
}

input DbParamsInp {
  db: String
  dbType: DbType
  host: String
  pass: String
  port: String
  tables: [DbTableInp]
  user: String
}

type DbTable {
  name: String
  periodicityType: PeriodicityType
  periodicityValue: Float
  schema: String
}

input DbTableInp {
  name: String
  periodicityType: PeriodicityType
  periodicityValue: Float
  schema: String
}

enum DbType {
  MSSQL
  MYSQL
  ORACLE
  POSTGRES
}

type EisDir {
  includeSubdirs: Boolean
  path: String
  queries: [String]
  regexp: String
  title: String
}

input EisDirInp {
  includeSubdirs: Boolean
  path: String
  queries: [String]
  regexp: String
  title: String
}

type EisParams {
  dirs: [EisDir]
  host: String
  pass: String
  port: String
  user: String
}

input EisParamsInp {
  dirs: [EisDirInp]
  host: String
  pass: String
  port: String
  user: String
}

type EtlAcl {
  datasourceEdit: Boolean
  datasourceRead: Boolean
  flowEdit: Boolean
  flowRead: Boolean
}

type Field {
  datatype: FieldDataType
  description: String
  fieldType: FieldType
  id: String
  isFKey: Boolean
  isInvisible: Boolean
  position: Int
  postfix: String
  title: String
}

enum FieldDataType {
  DATE
  DATETIME
  FLOAT
  GEO
  INT
  STRING
}

enum FieldType {
  DIMENSION
  MEASURE
}

type Flow {
  acl: FlowAcl
  connectedEntities: ConnectedEntities
  id: Int
  insertedAt: Timestamp
  object: Object
  title: String
  updatedAt: Timestamp
}

type FlowAcl {
  copy: Boolean
  delete: Boolean
  update: Boolean
}

type Folder {
  folders: [Folder]
  id: Int
  isLocked: Boolean
  isOpened: Boolean
  objects: [Object]
  sharedAccess: Boolean
  sharedToken: String
  title: String
}

type FormulaToken {
  dataValue: DataValue
  funcValue: FuncValue
  listValue: ListValue
  tokenType: TokenType!
  value: String
}

input FormulaTokenInput {
  dataValue: DataValueInput
  funcValue: FuncValueInput
  listValue: ListValueInput
  tokenType: TokenType!
  value: String
}

type FtpEnity {
  name: String
  type: FtpEnityType
}

enum FtpEnityType {
  DIR
  FILE
}

type Function {
  arg1Type: ArgType
  arg2Type: ArgType
  arg3Type: ArgType
  argsCount: Int
  description: String
  examples: [FunctionExample]
  name: String!
  resultType: ResultType
}

type FunctionExample {
  formula: String
  result: String
}

type FuncValue {
  arg1: [FormulaToken]
  arg2: [FormulaToken]
  arg3: [FormulaToken]
  args: [[FormulaToken]]
  name: String!
}

input FuncValueInput {
  arg1: [FormulaTokenInput]
  arg2: [FormulaTokenInput]
  arg3: [FormulaTokenInput]
  args: [[FormulaTokenInput]]
  name: String!
}

type Hierarchy {
  description: String
  dims: [HierarchyDim]
  id: Int
  insertedAt: Timestamp
  isInvisible: Boolean
  isOpened: Boolean
  position: Int
  title: String
  updatedAt: Timestamp
}

type HierarchyDim {
  dimId: String
  position: Int
}

input HierarchyDimInput {
  dimId: String
  position: Int
}

input IncludeInput {
  value: Boolean
}

type Indicator {
  baseRating: [[String]]
  connectedEntities: ConnectedEntities
  displayColumnIds: [String]
  displayFKeyId: String
  displayTableId: Int
  formula: [FormulaToken]
  id: Int
  insertedAt: Timestamp
  object: Object
  periodicity: Periodicity
  periodicityDays: Int
  showCountedFormula: Boolean
  sortType: SortType
  sortValue: Float
  sortValueType: SortValueType
  title: String
  updatedAt: Timestamp
}

type IndicatorsAutocomplete {
  field: Field
  function: Function
  name: String
  table: Table
  type: IndicatorsAutocompleteType
}

enum IndicatorsAutocompleteType {
  FIELD
  FUNCTION
  KEYWORD
  TABLE
}

enum JoinType {
  ALL_FULL
  ALL_INNER
  ALL_LEFT
  ALL_RIGHT
  ANTI_LEFT
  ANTI_RIGHT
  ANY_INNER
  ANY_LEFT
  ANY_RIGHT
  CROSS_JOIN
  SEMI_LEFT
  SEMI_RIGHT
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json

type ListValue {
  list: [String]
  title: String
}

input ListValueInput {
  list: [String]
  title: String
}

type Object {
  attachment: Attachment
  attachmentId: String
  entityId: String
  folderId: Int
  id: String
  objectType: ObjectType
  title: String
  updatedAt: Timestamp
}

enum ObjectType {
  DASHBOARD
  DATASOURCE
  FLOW
  GROUP_CHAT
  INDICATOR
  TABLE
}

type OlapAcl {
  olapRequest: Boolean
  panelsEdit: Boolean
  panelsRead: Boolean
}

type OlapChartLayer implements OlapLayer {
  chartType: OlapChartType
  columns: [OlapRequestField]
  cubeId: String
  havingFilters: [FormulaToken]
  height: Int
  hierarchy: OlapHierarchy
  id: UUID!
  limit: Int
  mapProperties: OlapLayerMapProperties
  offset: Int
  positionX: Int
  positionY: Int
  rows: [OlapRequestField]
  styles: OlapLayerStyles
  type: OlapLayerType
  whereFilters: [FormulaToken]
  width: Int
}

enum OlapChartType {
  CONFIGURABLE
  GRAPH
  MAP
  PIE
  SCANNER
  SCATTER
  TABLE
  VALUE
}

type OlapDashboard {
  backgroundColor: String
  borderColor: String
  columnsCount: Int
  horizontalMargin: Int
  id: UUID!
  insertedAt: Timestamp
  layers: [OlapLayer]
  object: Object
  rowHeight: Int
  title: String!
  updatedAt: Timestamp
  verticalMargin: Int
  width: Int
  workspace: OlapDashboardWorkspace!
}

input OlapDashboardInput {
  backgroundColor: String
  borderColor: String
  columnsCount: Int
  horizontalMargin: Int
  layers: [OlapLayerInput]
  rowHeight: Int
  title: String
  verticalMargin: Int
  width: Int
  workspace: OlapDashboardWorkspace
}

enum OlapDashboardWorkspace {
  FIXED
  UNLIMITED
}

enum OlapFontStyle {
  ITALIC
  NORMAL
}

enum OlapFontWeight {
  BOLD
  NORMAL
}

enum OlapGridType {
  COMBINED
  HORIZONTAL
  VERTICAL
}

type OlapHierarchy {
  fields: [OlapRequestField]
  id: String
}

input OlapHierarchyInput {
  fields: [OlapRequestFieldInput]
  id: String
}

interface OlapLayer {
  height: Int
  id: UUID!
  positionX: Int
  positionY: Int
  type: OlapLayerType
  width: Int
}

type OlapLayerAlias {
  alias: String
  fieldId: String
  id: String
  name: String
}

input OlapLayerAliasInput {
  alias: String
  fieldId: String
  id: String
  name: String
}

type OlapLayerAxis {
  color: String
  gridColor: String
  lineStyle: OlapLayerLineStyle
  textStyle: OlapLayerTextStyle
  x: OlapLayerDirectAxis
  y: OlapLayerDirectAxis
}

input OlapLayerAxisInput {
  color: String
  gridColor: String
  lineStyle: OlapLayerLineStyleInput
  textStyle: OlapLayerTextStyleInput
  x: OlapLayerDirectAxisInput
  y: OlapLayerDirectAxisInput
}

type OlapLayerBarFillStyle {
  color: String
  opacity: Float
}

input OlapLayerBarFillStyleInput {
  color: String
  opacity: Float
}

type OlapLayerDirectAxis {
  withAxisLine: Boolean
  withLabel: Boolean
  withName: Boolean
}

input OlapLayerDirectAxisInput {
  withAxisLine: Boolean
  withLabel: Boolean
  withName: Boolean
}

type OlapLayerGrid {
  color: String
  lineStyle: OlapLayerLineStyle
  type: OlapGridType
}

input OlapLayerGridInput {
  color: String
  lineStyle: OlapLayerLineStyleInput
  type: OlapGridType
}

input OlapLayerInput {
  chartType: OlapChartType
  color: String
  columns: [OlapRequestFieldInput]
  cubeId: String
  fontStyle: OlapFontStyle
  fontWeight: OlapFontWeight
  havingFilters: [FormulaTokenInput]
  height: Int
  hierarchy: OlapHierarchyInput
  id: UUID
  limit: Int
  mapProperties: OlapLayerMapPropertiesInput
  offset: Int
  positionX: Int
  positionY: Int
  rows: [OlapRequestFieldInput]
  size: Int
  styles: OlapLayerStylesInput
  text: String
  textAlign: OlapTextAlign
  textDecoration: OlapTextDecoration
  type: OlapLayerType
  whereFilters: [FormulaTokenInput]
  width: Int
}

type OlapLayerLegend {
  show: Boolean
}

input OlapLayerLegendInput {
  show: Boolean
}

type OlapLayerLineStyle {
  color: String
  opacity: Float
  type: OlapLineType
  width: Float
}

input OlapLayerLineStyleInput {
  color: String
  opacity: Float
  type: OlapLineType
  width: Float
}

type OlapLayerMap {
  color: String
  ranges: [OlapLayerRanges]
}

input OlapLayerMapInput {
  color: String
  ranges: [OlapLayerRangesInput]
}

type OlapLayerMapProperties {
  center: [Float]
  zoom: Float
}

input OlapLayerMapPropertiesInput {
  center: [Float]
  zoom: Float
}

type OlapLayerMark {
  color: String
  position: String
  type: String
  value: String
}

input OlapLayerMarkInput {
  color: String
  position: String
  type: String
  value: String
}

type OlapLayerMarkLine {
  category: String
  color: String
  label: String
  position: String
  type: OlapMarkLineType
  value: Float
}

input OlapLayerMarkLineInput {
  category: String
  color: String
  label: String
  position: String
  type: OlapMarkLineType
  value: Float
}

type OlapLayerPoint {
  barFill: OlapLayerBarFillStyle
  barStroke: OlapLayerShapeStyle
  fill: OlapLayerShapeStyle
  id: String
  marks: [OlapLayerMark]
  stroke: OlapLayerShapeStyle
}

input OlapLayerPointInput {
  barFill: OlapLayerBarFillStyleInput
  barStroke: OlapLayerShapeStyleInput
  fill: OlapLayerShapeStyleInput
  id: String
  marks: [OlapLayerMarkInput]
  stroke: OlapLayerShapeStyleInput
}

type OlapLayerRanges {
  color: String
  end: Float
  start: Float
}

input OlapLayerRangesInput {
  color: String
  end: Float
  start: Float
}

type OlapLayerSeria {
  id: String
  lineStyle: OlapLayerLineStyle
  marks: [OlapLayerMark]
  pointStyle: OlapLayerPoint
  showTrend: Boolean
  smooth: Boolean
  stack: String
  trendLine: TrendLine
  type: OlapSeriaType
}

input OlapLayerSeriaInput {
  id: String
  lineStyle: OlapLayerLineStyleInput
  marks: [OlapLayerMarkInput]
  pointStyle: OlapLayerPointInput
  showTrend: Boolean
  smooth: Boolean
  stack: String
  trendLine: TrendLineInput
  type: OlapSeriaType
}

type OlapLayerShapeStyle {
  color: String
  opacity: Float
  size: Float
}

input OlapLayerShapeStyleInput {
  color: String
  opacity: Float
  size: Float
}

type OlapLayerStyles {
  aliases: [OlapLayerAlias]
  axis: OlapLayerAxis
  backgroundColor: String
  grid: OlapLayerGrid
  hGrid: OlapLayerVHGrid
  legend: OlapLayerLegend
  map: OlapLayerMap
  markLines: [OlapLayerMarkLine]
  points: [OlapLayerPoint]
  series: [OlapLayerSeria]
  table: OlapLayerTable
  vGrid: OlapLayerVHGrid
  valueRounding: Int
  zooming: OlapLayerZooming
}

input OlapLayerStylesInput {
  aliases: [OlapLayerAliasInput]
  axis: OlapLayerAxisInput
  backgroundColor: String
  grid: OlapLayerGridInput
  hGrid: OlapLayerVHGridInput
  legend: OlapLayerLegendInput
  map: OlapLayerMapInput
  markLines: [OlapLayerMarkLineInput]
  points: [OlapLayerPointInput]
  series: [OlapLayerSeriaInput]
  table: OlapLayerTableInput
  vGrid: OlapLayerVHGridInput
  valueRounding: Int
  zooming: OlapLayerZoomingInput
}

type OlapLayerTable {
  horizontalPadding: Int
  id: String
  mergeCells: Boolean
  stickyHeader: Boolean
  stickySide: Boolean
  verticalPadding: Int
}

input OlapLayerTableInput {
  horizontalPadding: Int
  id: String
  mergeCells: Boolean
  stickyHeader: Boolean
  stickySide: Boolean
  verticalPadding: Int
}

type OlapLayerTextStyle {
  color: String
  fontSize: Float
}

input OlapLayerTextStyleInput {
  color: String
  fontSize: Float
}

enum OlapLayerType {
  CHART
  TEXT
}

type OlapLayerVHGrid {
  areas: Int
  show: Boolean
}

input OlapLayerVHGridInput {
  areas: Int
  show: Boolean
}

type OlapLayerZooming {
  horizontal: OlapLayerZoomingOpts
  vertical: OlapLayerZoomingOpts
}

input OlapLayerZoomingInput {
  horizontal: OlapLayerZoomingOptsInput
  vertical: OlapLayerZoomingOptsInput
}

type OlapLayerZoomingOpts {
  enabled: Boolean
  end: Float
  start: Float
}

input OlapLayerZoomingOptsInput {
  enabled: Boolean
  end: Float
  start: Float
}

enum OlapLineType {
  DASHED
  DOTTED
  SOLID
}

enum OlapMarkLineType {
  HORIZONTAL
  VERTICAL
}

enum OlapRequestAgg {
  ARG_MAX
  ARG_MIN
  AVG
  CALCULATED
  COUNT
  KURTPOP
  KURTSAMP
  MAX
  MEDIAN
  MIN
  NONE
  QUANTILE
  SKEWPOP
  SKEWSAMP
  SUM
  VAR_POP
  VAR_SAMP
}

type OlapRequestArg {
  columnId: String
  cubeId: String
  dataType: FieldDataType
  dateFormat: String
  label: String
  type: OlapRequestArgType!
  value: String
}

input OlapRequestArgInput {
  columnId: String
  cubeId: String
  dataType: FieldDataType
  dateFormat: String
  label: String
  type: OlapRequestArgType!
  value: String
}

enum OlapRequestArgType {
  COLUMN
  FLOAT
  INTEGER
  STRING
}

input OlapRequestConditionInput {
  field: OlapRequestFieldInput!
  value: String
}

type OlapRequestField {
  agg: OlapRequestAgg!
  args: [OlapRequestArg]
  calculatedFormula: [FormulaToken]
  hierarchyId: String
  id: String!
  name: String
}

input OlapRequestFieldInput {
  agg: OlapRequestAgg!
  args: [OlapRequestArgInput]
  calculatedFormula: [FormulaTokenInput]
  hierarchyId: String
  id: String!
  name: String
}

input OlapRequestInput {
  conditions: [OlapRequestConditionInput]
  cubeId: String
  fields: [OlapRequestFieldInput!]
  format: OlapRequestType!
  havingFilters: [FormulaTokenInput]
  limit: Int
  offset: Int
  scannerId: String
  whereFilters: [FormulaTokenInput]
}

enum OlapRequestType {
  AXIS
  FLAT
}

type OlapResponse {
  data: Json
}

enum OlapSeriaType {
  BAR
  LINE
  SCATTER
}

enum OlapTextAlign {
  CENTER
  JUSTIFY
  LEFT
  RIGHT
}

enum OlapTextDecoration {
  LINE_THROUGH
  NONE
  UNDERLINE
}

type OlapTextLayer implements OlapLayer {
  color: String
  fontStyle: OlapFontStyle
  fontWeight: OlapFontWeight
  height: Int
  id: UUID!
  positionX: Int
  positionY: Int
  size: Int
  text: String
  textAlign: OlapTextAlign
  textDecoration: OlapTextDecoration
  type: OlapLayerType
  width: Int
}

type Organisation {
  acl: Acl
  description: String
  email: String
  id: Int
  name: String
  private: Boolean
  url: String
}

type OseAcl {
  tablesEdit: Boolean
  tablesRead: Boolean
}

type OutDbParams {
  db: String
  dbType: DbType
  exportToDb: Boolean
  host: String
  pass: String
  port: String
  tableName: String
  title: String
  user: String
}

input OutDbParamsInput {
  db: String
  dbType: DbType
  exportToDb: Boolean
  host: String
  pass: String
  port: String
  tableName: String
  title: String
  user: String
}

enum Periodicity {
  CUSTOM
  DAY
  HOUR
  MONTH
  NONE
  QUARTER
  WEEK
}

enum PeriodicityType {
  DAYS
  HOURS
  NEVER
  ONCE
}

input PositionInput {
  value: Int
}

type Progress {
  allCount: Int
  doneCount: Int
  label: String
}

enum ProgressStatus {
  CREATED
  DONE
  FAILED
  IN_PROGRESS
  STOPPED
}

enum ResultType {
  DATE
  NUMBER
  STRING
}

type RootMutationType {
  """Unshare folder"""
  unshareFolder(id: Int!): String

  """Update datasource"""
  updateDatasource(dbParams: DbParamsInp, eisParams: EisParamsInp, id: Int, periodicityType: PeriodicityType, periodicityValue: Float, title: String): Datasource

  """Delete dashboard"""
  olapDashboardDelete(id: UUID!): Boolean

  """Delete step"""
  deleteStep(id: Int!): String

  """Create OSE table"""
  createOseTable(indicatorId: Int!): String

  """Update hierarchy"""
  updateHierarchy(description: String, dims: [HierarchyDimInput], id: Int!, isInvisible: Boolean, isOpened: Boolean, position: Int, title: String): Hierarchy

  """Create step"""
  createStep(flowId: Int!, joinType: JoinType, positionX: Int, positionY: Int, sourceStepId: Int, sourceStepIds: [Int], stepType: StepType!, title: String): Step

  """Close folder"""
  closeFolder(id: Int!, pinnedFolderId: Int): String

  """Close all folders"""
  closeAllFolders(exceptIds: [Int]): String

  """Set where filter"""
  setWhereFilter(stepId: Int!, whereCond: [FormulaTokenInput]): Step

  """Create dashboard"""
  olapDashboardCreate(dashboard: OlapDashboardInput!, folderId: Int): OlapDashboard

  """Calculate join"""
  calculateJoin(joinId: Int!, joinType: JoinType!, leftStepColumnId: Int!, leftStepId: Int!, rightStepColumnId: Int!, rightStepId: Int!): Step

  """Delete datasources"""
  deleteDatasource(id: Int!): String

  """Create hierarchy"""
  createHierarchy(tableId: Int!, title: String!): Hierarchy

  """Delete change"""
  deleteChange(id: Int!): [Column]

  """Set join steps"""
  setJoinSteps(joinId: Int!, leftStepId: Int, rightStepId: Int): Step

  """Delete connection"""
  deleteConnection(id: Int): String

  """Refresh session"""
  sessionUpdate(refreshToken: UUID!): Session

  """Update connection"""
  updateConnection(id: Int, joinType: JoinType, leftTableFieldId: String, leftTableId: Int, rightTableFieldId: String, rightTableId: Int): Connection

  """Delete indicator"""
  deleteIndicator(id: Int!): String

  """Delete folder"""
  deleteFolder(id: Int!): String

  """Export Step"""
  exportStep(db: String, dbType: DbType, host: String, id: Int!, pass: String, port: String, tableName: String, user: String): String

  """import file"""
  importFile(file: Upload, flowId: Int!, positionX: Int, positionY: Int): [Step]

  """Create column"""
  createColumn(formula: [FormulaTokenInput]!, stepId: Int!, title: String!): Column

  """Update flow"""
  updateFlow(id: Int!, title: String): Flow

  """Run step"""
  runStep(stepId: Int!): String

  """Create folder"""
  createFolder(folderId: Int, title: String!): Folder

  """load table to memory"""
  loadToMemory(id: Int!): Table

  """Create change"""
  createChange(changeCaseTypeInput: ChangeCaseTypeInput, changeType: ChangeType, codecInput: CodecInput, columnId: Int, columnIds: [Int], dataTypeInput: DataTypeInput, includeInput: IncludeInput, positionInput: PositionInput, stepId: Int!, titleInput: TitleInput, unionColumnsInput: UnionColumnsInput, widthInput: WidthInput): Change

  """Update organisation"""
  organisationsUpdate(description: String, email: String, id: Int!, name: String!, private: Boolean, url: String!): Organisation

  """Share folder"""
  shareFolder(id: Int!): String

  """Pin folder"""
  pinFolder(folderId: Int!): Folder

  """Get csv export link"""
  getCsvExportLink(stepId: Int!): String

  """remove table from memory"""
  removeFromMemory(id: Int!): Table

  """Unpin folder"""
  unpinFolder(folderId: Int!): String

  """Delete hierarchy"""
  deleteHierarchy(id: Int!): String

  """Sign in"""
  sessionCreate(email: String!, password: String!): Session

  """Update object"""
  updateObject(attachmentId: String, folderId: Int, id: String!, title: String): Object

  """Add steps to union"""
  addStepsToUnion(stepIds: [Int], unionId: Int!): Step

  """Update step"""
  updateStep(dateColumn: String, exportToMadd: Boolean, fullUpdate: Boolean, id: Int!, outDbParams: [OutDbParamsInput], periodicity: Int, positionX: Int, positionY: Int, title: String): Step

  """Update indicator"""
  updateIndicator(displayColumnIds: [String], displayFKeyId: String, displayTableId: Int, formula: [FormulaTokenInput], id: Int!, periodicity: Periodicity, periodicityDays: Int, showCountedFormula: Boolean, sortType: SortType, sortValue: Float, sortValueType: SortValueType, title: String!): Indicator

  """Create datasource"""
  createDatasource(dbParams: DbParamsInp, eisParams: EisParamsInp, folderId: Int, periodicityType: PeriodicityType, periodicityValue: Float, sourceType: SourceType, title: String): Datasource

  """stop datasource import"""
  stopImport(datasourceId: Int): Datasource

  """Create attachment"""
  attachmentCreate(file: Upload): Attachment

  """Unpin object"""
  unpinObject(id: String!): String

  """Export Step to MADD"""
  exportStepToMadd(id: Int!): String

  """Update folder"""
  updateFolder(folderId: Int, id: Int!, title: String): Folder

  """Add step to union"""
  addStepToUnion(stepId: Int!, unionId: Int!): Step

  """Update field"""
  updateField(description: String, fieldType: FieldType, id: String!, isFKey: Boolean, isInvisible: Boolean, position: Int, postfix: String, title: String): Field

  """Create indicator"""
  createIndicator(displayColumnIds: [String], displayFKeyId: String, displayTableId: Int, folderId: Int, formula: [FormulaTokenInput], periodicity: Periodicity, periodicityDays: Int, showCountedFormula: Boolean, sortType: SortType, sortValue: Float, sortValueType: SortValueType, title: String!): Indicator

  """Create flow"""
  createFlow(folderId: Int, title: String!): Flow

  """Get duplicates"""
  getDuplicates(stepId: Int!): [[Int]]

  """Update dashboard"""
  olapDashboardUpdate(dashboard: OlapDashboardInput!, id: UUID!): OlapDashboard

  """Open folder"""
  openFolder(id: Int!, pinnedFolderId: Int): Folder

  """Get total column stats"""
  getTotalColumnStats(columnIds: [Int]): [ColumnStat]

  """Delete attachment"""
  attachmentDelete(id: UUID): String

  """Delete steps"""
  deleteSteps(ids: [Int]): String

  """Pin object"""
  pinObject(id: String!): String

  """Delete organisation"""
  organisationsDelete(id: Int!): Boolean

  """Update table"""
  updateTable(cubeDescription: String, cubeTitle: String, description: String, id: Int!, isInvisible: Boolean, isOpened: Boolean, positionX: Int, positionY: Int, tableType: TableType, title: String): Table

  """Sign out"""
  sessionDelete: Boolean

  """Create connection"""
  createConnection(joinType: JoinType, leftTableFieldId: String, leftTableId: Int, rightTableFieldId: String, rightTableId: Int): Connection

  """Create organisation"""
  organisationsCreate(description: String, email: String, name: String!, private: Boolean, url: String!): Organisation

  """Delete flow"""
  deleteFlow(id: Int!): String

  """remove step from union"""
  removeStepFromUnion(stepId: Int!, unionId: Int!): Step

  """init datasource import"""
  initImport(datasourceId: Int): Datasource
}

type RootQueryType {
  """chech_indicator_formula"""
  chechIndicatorFormula(formula: [FormulaTokenInput]): String

  """check_where_formula"""
  checkWhereFormula(whereCond: [FormulaTokenInput]!): String

  """Get column stats by formula"""
  getColumnStatsByFormula(formula: [FormulaTokenInput]!, stepId: Int!): [ColumnStat]

  """Get column values"""
  getColumnValues(columnId: Int!, limit: Int, offset: Int, search: String): [String]

  """Get columns"""
  getColumns(ids: [Int!], limit: Int = 20, offset: Int = 0, orderBy: String, search: String, stepId: Int): [Column]

  """Get datasources"""
  getDatasources(ids: [Int]): [Datasource]

  """get db tables"""
  getDbTables(db: String!, dbType: DbType!, host: String!, limit: Int, offset: Int, pass: String!, port: String!, search: String, user: String!): [DbTable]

  """Get autocomplete"""
  getEtlStepAutocomplete(search: String!, stepId: Int!, types: [AutocompleteType]): [Autocomplete]

  """Get flows"""
  getFlows(ids: [Int!], limit: Int = 2000, offset: Int = 0, orderBy: String, search: String): [Flow]

  """Get folder trees"""
  getFolderTree(id: Int): Trees

  """Get folders"""
  getFolders(id: Int): [Folder]

  """Get functions list"""
  getFunctions: [Function]

  """Get hierarchies"""
  getHierarchies(ids: [Int]): [Hierarchy]

  """Get indicator base rating"""
  getIndicatorBaseRating(displayColumnIds: [String], displayFKeyId: String, displayTableId: Int, formula: [FormulaTokenInput], showCountedFormula: Boolean, sortType: SortType = ASC, sortValue: Float, sortValueType: SortValueType = VALUE): [[String]]

  """Get indicators"""
  getIndicators(ids: [Int]): [Indicator]

  """Get indicators autocomplete"""
  getIndicatorsAutocomplete(search: String!, tableId: Int, types: [IndicatorsAutocompleteType]): [IndicatorsAutocomplete]

  """Get objects"""
  getObjects(limit: Int = 50, offset: Int = 0, search: String, types: [ObjectType]): [Object]

  """for socket_message to appear in schema"""
  getSocketMessage: SocketMessage

  """Get steps"""
  getSteps(datasourceId: Int, flowId: Int, ids: [Int!], limit: Int = 100, offset: Int = 0): [Step]

  """Get tables"""
  getTables(ids: [Int]): [Table]

  """ls ftp dir"""
  lsFtpDir(host: String, limit: Int = 100, offset: Int = 0, pass: String, path: String = "/", port: String, regexp: String = ".*", user: String): [FtpEnity]

  """Get dashboards"""
  olapDashboardGet(ids: [UUID], limit: Int = 20, offset: Int, search: String): [OlapDashboard]

  """OLAP request"""
  olapRequest(request: OlapRequestInput!): OlapResponse

  """Get current user organisations"""
  organisationsMyGet: [Organisation]

  """Get profile"""
  profileGet: User

  """Scanner drill"""
  scannerDrill(cubeId: String!, limit: Int = 1000, offset: Int = 0, scanDate: String!, scannerId: String!): [[String]]
}

type Session {
  expireAt: Timestamp
  refreshToken: UUID
  token: UUID
  user: User
}

type SharedAcl {
  foldersEdit: Boolean
  foldersRead: Boolean
  objectsEdit: Boolean
  objectsRead: Boolean
  organisationCreate: Boolean
}

union SocketMessage = StepProgress | DatasourceState | DatasourceProgress | ChatOnline | ChatUser | ChatMessage | ChatRoom

enum SortType {
  ASC
  DESC
}

enum SortValueType {
  REFERENCE
  REFERENCE_AVG
  VALUE
}

enum SourceType {
  CLICKHOUSE
  DB
  EIS
  FTP
}

type Step {
  columnsCount: Int
  dupColumnsCount: Int
  positionY: Int
  id: Int
  leftNotInRecords: Int
  rightInKeys: Int
  updatedAt: Timestamp
  leftColumns: [Column]
  originalSchemaTitle: String
  rightStepColumnId: Int
  title: String
  periodicity: Int
  stepIds: [Int]
  exportToMadd: Boolean
  insertedAt: Timestamp
  flow: Flow
  leftStepColumnId: Int
  positionX: Int
  outDbParams: [OutDbParams]
  leftInRecords: Int
  fullUpdate: Boolean
  leftStepId: Int
  whereCond: [FormulaToken]
  matchedKeys: [String]
  rightStepId: Int
  tableName: String
  rightUnmatchedKeys: [String]
  changes: [Change]
  datasource: Datasource
  leftUnmatchedKeys: [String]
  dateColumn: String
  leftInKeys: Int
  leftNotInKeys: Int
  rightInRecords: Int
  rightNotInKeys: Int
  joinType: JoinType
  originalTitle: String
  rightColumns: [Column]
  rightNotInRecords: Int
  dupGroupsCount: Int
  stepType: StepType
}

type StepProgress {
  processes: [Progress]
  status: ProgressStatus
  stepId: Int
}

enum StepType {
  AGG
  JOIN
  OUT
  PIVOT
  SOURCE
  TRANSFORM
  UNION
}

type Table {
  connections: [Connection]
  cubeDescription: String
  cubeTitle: String
  description: String
  fields: [Field]
  hierarchies: [Hierarchy]
  id: Int
  inMemory: Boolean
  insertedAt: Timestamp
  isInvisible: Boolean
  isOpened: Boolean
  object: Object
  positionX: Int
  positionY: Int
  tableType: TableType
  title: String
  updatedAt: Timestamp
}

enum TableType {
  DIMENSION
  FACT
}

"""Unix timestamp"""
scalar Timestamp

input TitleInput {
  value: String!
}

enum TokenType {
  BRACKET
  DATA
  EQ_OPERATOR
  FUNC
  IN_OPERATOR
  LIST
  LOGIC_OPERATOR
  NUMBER
  OPERATOR
  SPACE
  STRING
}

type Tree {
  folders: [Folder]
  objects: [Object]
}

type Trees {
  pinnedTree: Tree
  tree: Tree
}

type TrendLine {
  color: String
  opacity: Float
}

input TrendLineInput {
  color: String
  opacity: Float
}

input UnionColumnsInput {
  value: [Int]
}

"""Represents an uploaded file."""
scalar Upload

type User {
  acl: Acl
  avatar: String
  email: String
  firstName: String
  id: Int
  lastName: String
  name: String
}

"""UUID scalar"""
scalar UUID

input WidthInput {
  value: Int
}
