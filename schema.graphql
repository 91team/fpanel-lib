schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Acl {
  etl: EtlAcl!
  olap: OlapAcl!
  ose: OseAcl!
  shared: SharedAcl!
}

type AdditionalCalc {
  cumulativeTotal: Boolean
  groupBy: String
  growth: Boolean
  growthRate: Boolean
  linkedFieldId: String
  percentOfTotal: Boolean
}

input AdditionalCalcInput {
  cumulativeTotal: Boolean
  groupBy: String
  growth: Boolean
  growthRate: Boolean
  linkedFieldId: String
  percentOfTotal: Boolean
}

enum Agg {
  AVG
  COUNT
  MAX
  MEDIAN
  MIN
  SUM
}

type Analysis {
  regression: Regression
}

input AnalysisInput {
  regression: RegressionInput
}

enum ArgType {
  ANY_DATE
  ANY_NUMBER
  ANY_STRING
  COL_DATE
  COL_NUMBER
  COL_STRING
  DATE
  NUMBER
  STRING
}

type Attachment {
  aspectRatio: Float
  contentType: String
  id: UUID!
  name: String
  url: String
}

enum AuthMode {
  HARD
  REFRESH
}

enum AuthType {
  API_KEY
  BASIC
  BEARER
  DIGEST
  NONE
  OAUTH20
}

type Autocomplete {
  column: Column
  function: Function
  name: String
  type: AutocompleteType
}

enum AutocompleteType {
  COLUMN
  FUNCTION
  KEYWORD
}

enum CaseType {
  CAPITALIZE
  LOWER
  NONE
  UPPER
}

type Change {
  after: String
  before: String
  changeType: ChangeType
  column: Column!
  id: Int!
  insertedAt: Timestamp
}

input ChangeCaseTypeInput {
  value: CaseType
}

enum ChangeType {
  CHANGE_CASE_TYPE
  CHANGE_CODECS
  CHANGE_DATA_TYPE
  CHANGE_INCLUDE
  CHANGE_POSITION
  CHANGE_TITLE
  CHANGE_WIDTH
  DELETE_COLUMN
  DELETE_COLUMNS
  REMOVE_LETTERS
  REMOVE_NUMBERS
  REMOVE_PUNCTUATION
  TRIM_SPACES
  UNION_COLUMNS
}

type ChatAvatar {
  large: String
  small: String
}

type ChatMessage {
  embed: Json
  messageId: String
  reply: ChatMessage
  replyId: String
  roomId: String
  text: String
  user: ChatUser
  userId: String
}

type ChatOnline {
  id: String
  meta: ChatOnlineMeta
}

type ChatOnlineMeta {
  onlineAt: Int
}

type ChatRoom {
  dialog: Boolean
  lastMessage: ChatMessage
  messageId: String
  metadata: Json
  name: String
  roomId: String
  updatedAt: Int
  user: ChatUser
}

type ChatUser {
  avatar: ChatAvatar
  id: String
  name: String
}

type Codec {
  level: Int
  type: CodecType
}

input CodecInp {
  level: Int
  type: CodecType
}

input CodecInput {
  value: [CodecInp!]
}

enum CodecType {
  DELTA
  DOUBLE_DELTA
  GORILLA
  LZ4
  LZ4HC
  NONE
  T64
  ZSTD
}

type Column {
  caseType: CaseType
  changes: [Change!]
  codecs: [Codec!]
  columnIds: [Int!]
  columnName: String
  columnStats: [ColumnStat!]
  compressedBytes: Int
  dataType: DataType
  defaultExpr: String
  id: Int!
  include: Boolean
  insertedAt: Timestamp
  nullable: Boolean
  originalTitle: String
  position: Int
  removeLetters: Boolean
  removeNumbers: Boolean
  removePunctuation: Boolean
  sourceStepId: Int
  step: Step!
  stepIds: [Int!]!
  title: String!
  trimSpaces: Boolean
  uncompressedBytes: Int
  updatedAt: Timestamp
  width: Int
}

type ColumnStat {
  count: Int
  value: String
}

type ConnectedEntities {
  folders: Json
  objects: Json
}

type Connection {
  id: Int
  joinType: JoinType
  leftTableFieldId: String
  leftTableId: Int
  rightTableFieldId: String
  rightTableId: Int
}

type Coords {
  coordsType: CoordsType!
  lineCoords: [[Float!]!]
  pointCoords: [Float!]
  polyCoords: [[[Float!]!]!]
}

input CoordsInp {
  coordsType: CoordsType
  lineCoords: [[Float!]!]
  pointCoords: [Float!]
  polyCoords: [[[Float!]!]!]
}

enum CoordsType {
  LINE
  POINT
  POLY
}

type CubeFilter {
  cubeId: String!
  cubeTitle: String
  draftInput: String
  filter: [FormulaToken!]!
}

input CubeFilterInput {
  cubeId: String!
  draftInput: String
  filter: [FormulaTokenInput!]
}

type DashboardAnalysis {
  regression: DashboardRegression
}

input DashboardAnalysisInput {
  regression: DashboardRegressionInput
}

type DashboardRegression {
  models: [RegressionModelV1!]
  predictSize: Int!
}

input DashboardRegressionInput {
  models: [RegressionModelV1Input!]
  predictSize: Int!
}

type Datasource {
  datasourceProgresses: [DatasourceProgress!]
  datasourceState: DatasourceState
  dbParams: DbParams
  eisParams: EisParams
  ftpParams: FtpParams
  id: Int!
  object: Object!
  odataParams: OdataParams
  periodicityType: PeriodicityType
  periodicityValue: Float
  restParams: RestParams
  sourceType: SourceType!
  steps: [Step!]!
  title: String!
}

type DatasourceProgress {
  allCount: Int
  datasourceId: Int
  doneCount: Int
  doneDate: Timestamp
  futureStartDate: Timestamp
  processes: [Progress!]
  startDate: Timestamp
  status: ProgressStatus
  stopDate: Timestamp
  tableId: String!
}

type DatasourceState {
  allCount: Int
  currentSubsource: String
  datasourceId: Int
  doneCount: Int
}

type DataTable {
  description: String
  errorCount: Int
  fields: [DataTableField!]!
  id: UUID!
  insertedAt: Timestamp
  mapCenter: [Float!]
  mapLayerStyles: MapLayerStyles
  mapZoom: Float
  object: Object
  tablePositionType: TablePositionType
  tablePositionX: Int
  tablePositionY: Int
  tileLayerLink: String
  title: String!
  tooltip: MapLayerTooltip
  updatedAt: Timestamp
}

type DataTableField {
  considerSearch: Boolean!
  dataTableId: UUID!
  defaultValue: [String!]
  fieldCatalogId: String
  fieldType: DataTableFieldType!
  id: UUID!
  insertedAt: Timestamp
  isLink: Boolean!
  isVideoLink: Boolean!
  multiInput: Boolean!
  position: Int!
  required: Boolean!
  showInTable: Boolean!
  title: String!
  uniq: Boolean!
  updatedAt: Timestamp
  validation: DataTableFieldValidation
  width: Int
}

enum DataTableFieldType {
  CATALOG
  COORDINATES
  DATE
  DATETIME
  FILE
  NUMBER
  STRING
}

type DataTableFieldValidation {
  dateFormat: String
  dateMax: String
  dateMin: String
  datetimeFormat: String
  datetimeMax: String
  datetimeMin: String
  fileFormats: [DataTableFileFormat!]
  numberMax: Float
  numberMin: Float
  stringMaxChars: Int
  stringMinChars: Int
  stringRegexp: String
}

input DataTableFieldValidationInput {
  dateFormat: String
  dateMax: String
  dateMin: String
  datetimeFormat: String
  datetimeMax: String
  datetimeMin: String
  fileFormats: [DataTableFileFormat!]
  numberMax: Float
  numberMin: Float
  stringMaxChars: Int
  stringMinChars: Int
  stringRegexp: String
}

enum DataTableFileFormat {
  CSV
  DOCX
  JPG
  PDF
  PNG
  XLSX
  ZIP
}

type DataTableRow {
  createdAt: Timestamp
  fields: [DataTableRowField!]!
  id: UUID!
}

type DataTableRowField {
  catalogValue: [String!]
  coordinatesValue: Coords
  dataTableFieldId: String!
  dateValue: [Timestamp!]
  datetimeValue: [Timestamp!]
  fileValue: [Attachment!]
  numberValue: [Float!]
  stringValue: [String!]
  userEnteredValue: [String!]
  validationErrors: [String!]
}

enum DataType {
  DATE
  DATETIME
  ENUM
  FLOAT32
  FLOAT64
  INT16
  INT32
  INT64
  INT8
  STRING
  STRING_N
  UINT16
  UINT32
  UINT64
  UINT8
  UUID
}

input DataTypeInput {
  value: DataType
}

type DataValue {
  agg: Agg
  columnId: Int
  dataTableFieldId: String
  fieldId: String
  filter: [FormulaToken!]
  groupFieldId: String
  tableId: Int
  title: String
}

input DataValueInput {
  agg: Agg
  columnId: Int
  dataTableFieldId: String
  fieldId: String
  filter: [FormulaTokenInput!]
  groupFieldId: String
  tableId: Int
  title: String
}

enum DateLimitType {
  DAYS
  HOURS
  MINUTES
}

type DbParams {
  db: String
  dbType: DbType
  host: String
  pass: String
  port: String
  tables: [DbTable!]
  user: String
}

input DbParamsInp {
  db: String
  dbType: DbType
  host: String
  pass: String
  port: String
  tables: [DbTableInp!]
  user: String
}

type DbTable {
  id: String
  name: String!
  schema: String
}

input DbTableInp {
  id: String
  name: String
  schema: String
}

enum DbType {
  MSSQL
  MYSQL
  ORACLE
  POSTGRES
}

type DefaultPanel {
  panelId: UUID!
  userId: Int!
}

type EisDir {
  id: String
  includeSubdirs: Boolean
  path: String!
  queries: [String!]
  regexp: String
  title: String
}

input EisDirInp {
  id: String
  includeSubdirs: Boolean
  path: String
  queries: [String!]
  regexp: String
  title: String
}

type EisParams {
  dirs: [EisDir!]
  host: String
  pass: String
  port: String
  user: String
}

input EisParamsInp {
  dirs: [EisDirInp!]
  host: String
  pass: String
  port: String
  user: String
}

type EntityCreated {
  entity: Json
  type: EntityCreatedType
}

enum EntityCreatedType {
  ETL_STEP
  FOLDER
  OBJECT
  OLAP_TABLE
}

type EtlAcl {
  datasourceEdit: Boolean
  datasourceRead: Boolean
  flowEdit: Boolean
  flowRead: Boolean
}

type ExternalSystem {
  clientId: String
  clientSecret: String
  folderId: Int!
  id: Int!
  params: [ExternalSystemParams!]!
  redirectUri: String
  title: String!
}

type ExternalSystemParams {
  active: Boolean
  description: String!
  key: String!
  value: String!
}

input ExternalSystemParamsInp {
  active: Boolean
  description: String!
  key: String!
  value: String!
}

type Field {
  datatype: FieldDataType!
  description: String
  fieldType: FieldType!
  id: String!
  isFKey: Boolean
  isInvisible: Boolean
  isLink: Boolean
  position: Int
  postfix: String
  title: String!
}

enum FieldDataType {
  DATE
  DATETIME
  FLOAT
  GEO
  INT
  STRING
}

enum FieldType {
  DIMENSION
  MEASURE
}

enum FilterVisType {
  BUTTONS
  MULTISELECT
  TABS
}

type Flow {
  acl: FlowAcl
  connectedEntities: ConnectedEntities!
  id: Int!
  insertedAt: Timestamp
  object: Object!
  title: String!
  updatedAt: Timestamp
}

type FlowAcl {
  copy: Boolean
  delete: Boolean
  update: Boolean
}

type Folder {
  asOwner: Boolean
  defaultPanels: [DefaultPanel!]!
  folders: [Folder!]!
  groupAccessList: [UserGroup!]
  id: Int!
  invitedUsers: [User!]
  isLocked: Boolean
  isOpened: Boolean
  objects: [Object!]!
  sharedAccess: Boolean
  sharedToken: String
  title: String!
  userQuota: Int
  usersAccessList: [User!]
}

type FormulaToken {
  dataValue: DataValue
  funcValue: FuncValue
  listValue: ListValue
  tokenType: TokenType!
  value: String
}

input FormulaTokenInput {
  dataValue: DataValueInput
  funcValue: FuncValueInput
  listValue: ListValueInput
  tokenType: TokenType!
  value: String
}

type FtpDir {
  id: String
  includeSubdirs: Boolean
  path: String
  regexp: String
  title: String
}

input FtpDirInp {
  id: String
  includeSubdirs: Boolean
  path: String
  regexp: String
  title: String
}

type FtpEnity {
  name: String
  type: FtpEnityType
}

enum FtpEnityType {
  DIR
  FILE
}

type FtpParams {
  dirs: [FtpDir!]
  host: String
  pass: String
  port: String
  user: String
}

input FtpParamsInp {
  dirs: [FtpDirInp!]
  host: String
  pass: String
  port: String
  user: String
}

type Function {
  arg1Type: ArgType
  arg2Type: ArgType
  arg3Type: ArgType
  argsCount: Int!
  description: String
  examples: [FunctionExample!]
  name: String!
  resultType: ResultType
}

type FunctionExample {
  formula: String
  result: String
}

type FuncValue {
  arg1: [FormulaToken!]
  arg2: [FormulaToken!]
  arg3: [FormulaToken!]
  args: [[FormulaToken!]!]!
  name: String!
}

input FuncValueInput {
  arg1: [FormulaTokenInput!]
  arg2: [FormulaTokenInput!]
  arg3: [FormulaTokenInput!]
  args: [[FormulaTokenInput!]!]!
  name: String!
}

type Hierarchy {
  description: String
  dims: [HierarchyDim!]
  id: Int
  insertedAt: Timestamp
  isInvisible: Boolean
  isOpened: Boolean
  position: Int
  title: String
  updatedAt: Timestamp
}

type HierarchyDim {
  dimId: String
  position: Int
}

input HierarchyDimInput {
  dimId: String
  position: Int
}

input IncludeInput {
  value: Boolean
}

type Indicator {
  baseRating: [[String!]!]
  connectedEntities: ConnectedEntities
  displayColumnIds: [String!]
  displayFKeyId: String
  displayTableId: Int
  formula: [FormulaToken!]
  id: Int
  insertedAt: Timestamp
  object: Object
  periodicity: Periodicity
  periodicityDays: Int
  showCountedFormula: Boolean
  sortType: SortType
  sortValue: Float
  sortValueType: SortValueType
  title: String
  updatedAt: Timestamp
}

type IndicatorsAutocomplete {
  field: Field
  function: Function
  name: String
  table: Table
  type: IndicatorsAutocompleteType
}

enum IndicatorsAutocompleteType {
  FIELD
  FUNCTION
  KEYWORD
  TABLE
}

enum JoinType {
  ALL_FULL
  ALL_INNER
  ALL_LEFT
  ALL_RIGHT
  ANTI_LEFT
  ANTI_RIGHT
  ANY_INNER
  ANY_LEFT
  ANY_RIGHT
  CROSS_JOIN
  SEMI_LEFT
  SEMI_RIGHT
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json

enum LegendDirection {
  COLUMN
  ROW
}

enum LegendPosition {
  BOTTOM
  LEFT
  RIGHT
  TOP
}

type ListValue {
  list: [String!]
  title: String
}

input ListValueInput {
  list: [String!]
  title: String
}

enum LOType {
  DATE
  NUMBER
  PAGES
}

type Map {
  center: [Float!]
  id: UUID!
  insertedAt: Timestamp
  layers: [MapLayer!]
  object: Object
  privateToken: String
  publicToken: String
  tileLayerLink: String
  updatedAt: Timestamp
  zoom: Float
}

type MapLayer {
  dataTableId: UUID!
  filter: [FormulaToken!]
  id: UUID!
  insertedAt: Timestamp
  mapId: UUID!
  mapLayerStyles: MapLayerStyles
  modal: MapLayerModal
  position: Int
  title: String
  tooltip: MapLayerTooltip
  updatedAt: Timestamp
  visible: Boolean
}

type MapLayerModal {
  backgroundColor: String
  blocks: [ModalBlock!]
  borderColor: String
  borderType: String
  borderWidth: String
  paddingBottom: String
  paddingLeft: String
  paddingRight: String
  paddingTop: String
}

enum MapLayerModalBlockType {
  EMBED
  LINK
  LOCAL_IMAGE
  REMOTE_IMAGE
  RTX
  VIDEO_STREAM
}

input MapLayerModalInp {
  backgroundColor: String
  blocks: [ModalBlockInp!]
  borderColor: String
  borderType: String
  borderWidth: String
  paddingBottom: String
  paddingLeft: String
  paddingRight: String
  paddingTop: String
}

type MapLayerRtxData {
  align: String
  children: [MapLayerRtxItem!]!
  type: MapLayerRtxDataType
}

input MapLayerRtxDataInp {
  align: String
  children: [MapLayerRtxItemInp!]
  type: MapLayerRtxDataType
}

enum MapLayerRtxDataType {
  PARAGRAPH
}

type MapLayerRtxItem {
  backgroundColor: String
  bold: Boolean
  children: [MapLayerRtxItemChild!]
  color: String
  dataTableFieldId: String
  fontSize: Float
  italic: Boolean
  text: String
  type: MapLayerRtxItemType
}

type MapLayerRtxItemChild {
  text: String
}

input MapLayerRtxItemChildInp {
  text: String
}

input MapLayerRtxItemInp {
  backgroundColor: String
  bold: Boolean
  children: [MapLayerRtxItemChildInp!]
  color: String
  dataTableFieldId: String
  fontSize: Float
  italic: Boolean
  text: String
  type: MapLayerRtxItemType
}

enum MapLayerRtxItemType {
  FIELD
  TEXT
}

type MapLayerShared {
  id: UUID!
  mapId: UUID!
  mapLayerStyles: MapLayerStyles
  modal: MapLayerModal
  position: Int
  title: String
  tooltip: MapLayerTooltip
  visible: Boolean
}

type MapLayerStyles {
  fillOptions: MapLayerStylesFillOptions
  gridSize: Float
  gridType: MapLayerStylesGridType
  showArrowLine: Boolean
  sizeOptions: MapLayerStylesSizeOptions
  stroke: MapLayerStylesStroke
}

type MapLayerStylesFillOptions {
  color: String
  fillType: MapLayerStylesFillType
  gridAggType: MapLayerStylesGridAggType
  opacity: Float
  scales: [MapLayerStylesFillScale!]
  scalesDataFieldId: String
  showInLegend: Boolean
}

input MapLayerStylesFillOptionsInp {
  color: String
  fillType: MapLayerStylesFillType
  gridAggType: MapLayerStylesGridAggType
  opacity: Float
  scales: [MapLayerStylesFillScaleInp!]
  scalesDataFieldId: String
  showInLegend: Boolean
}

type MapLayerStylesFillScale {
  limits: [MapLayerStylesFillScaleLimit!]
  name: String
  scaleFunc: MapLayerStylesScaleFunc
  scaleType: MapLayerStylesScaleType
  showInLegend: Boolean
}

input MapLayerStylesFillScaleInp {
  limits: [MapLayerStylesFillScaleLimitInp!]
  name: String
  scaleFunc: MapLayerStylesScaleFunc
  scaleType: MapLayerStylesScaleType
  showInLegend: Boolean
}

type MapLayerStylesFillScaleLimit {
  colorFrom: String
  colorTo: String
  from: Float
  to: Float
}

input MapLayerStylesFillScaleLimitInp {
  colorFrom: String
  colorTo: String
  from: Float
  to: Float
}

enum MapLayerStylesFillType {
  FIXED
  SCALES
}

enum MapLayerStylesGridAggType {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

enum MapLayerStylesGridType {
  HEX
  NONE
  SQUARE
}

input MapLayerStylesInp {
  fillOptions: MapLayerStylesFillOptionsInp
  gridSize: Float
  gridType: MapLayerStylesGridType
  showArrowLine: Boolean
  sizeOptions: MapLayerStylesSizeOptionsInp
  stroke: MapLayerStylesStrokeInp
}

enum MapLayerStylesScaleFunc {
  EXP
  LINEAR
  SQUARE
}

enum MapLayerStylesScaleType {
  CUSTOM
  LINEAR
  UNIFORM
}

type MapLayerStylesSizeOptions {
  gridAggType: MapLayerStylesGridAggType
  scales: [MapLayerStylesSizeScale!]
  scalesDataFieldId: String
  size: Float
  type: MapLayerStylesFillType
}

input MapLayerStylesSizeOptionsInp {
  gridAggType: MapLayerStylesGridAggType
  scales: [MapLayerStylesSizeScaleInp!]
  scalesDataFieldId: String
  size: Float
  type: MapLayerStylesFillType
}

type MapLayerStylesSizeScale {
  limits: [MapLayerStylesSizeScaleLimit!]
  name: String
  scaleFunc: MapLayerStylesScaleFunc
  scaleType: MapLayerStylesScaleType
  showInLegend: Boolean
}

input MapLayerStylesSizeScaleInp {
  limits: [MapLayerStylesSizeScaleLimitInp!]
  name: String
  scaleFunc: MapLayerStylesScaleFunc
  scaleType: MapLayerStylesScaleType
  showInLegend: Boolean
}

type MapLayerStylesSizeScaleLimit {
  from: Float
  sizeFrom: Float
  sizeTo: Float
  to: Float
}

input MapLayerStylesSizeScaleLimitInp {
  from: Float
  sizeFrom: Float
  sizeTo: Float
  to: Float
}

type MapLayerStylesStroke {
  color: String
  opacity: Float
  size: Float
}

input MapLayerStylesStrokeInp {
  color: String
  opacity: Float
  size: Float
}

type MapLayerTooltip {
  backgroundColor: String
  borderColor: String
  borderRadius: String
  borderType: String
  borderWidth: String
  paddingBottom: String
  paddingLeft: String
  paddingRight: String
  paddingTop: String
  rtx: [MapLayerRtxData!]
}

input MapLayerTooltipInp {
  backgroundColor: String
  borderColor: String
  borderRadius: String
  borderType: String
  borderWidth: String
  paddingBottom: String
  paddingLeft: String
  paddingRight: String
  paddingTop: String
  rtx: [MapLayerRtxDataInp!]
}

type MapShared {
  center: [Float!]
  id: UUID!
  layers: [MapLayerShared!]
  tileLayerLink: String
  zoom: Float
}

type ModalBlock {
  backgroundColor: String
  borderColor: String
  borderType: String
  borderWidth: String
  embedLink: [MapLayerRtxData!]
  link: [MapLayerRtxData!]
  linkText: [MapLayerRtxData!]
  localImageUrl: String
  paddingBottom: String
  paddingLeft: String
  paddingRight: String
  paddingTop: String
  remoteImageUrl: [MapLayerRtxData!]
  rtx: [MapLayerRtxData!]
  type: MapLayerModalBlockType
  videoStreamLink: [MapLayerRtxData!]
}

input ModalBlockInp {
  backgroundColor: String
  borderColor: String
  borderType: String
  borderWidth: String
  embedLink: [MapLayerRtxDataInp!]
  link: [MapLayerRtxDataInp!]
  linkText: [MapLayerRtxDataInp!]
  localImageUrl: String
  paddingBottom: String
  paddingLeft: String
  paddingRight: String
  paddingTop: String
  remoteImageUrl: [MapLayerRtxDataInp!]
  rtx: [MapLayerRtxDataInp!]
  type: MapLayerModalBlockType
  videoStreamLink: [MapLayerRtxDataInp!]
}

type Object {
  attachment: Attachment
  attachmentId: String
  entityId: String
  folderId: Int
  groupAccessList: [UserGroup!]!
  id: String!
  objectType: ObjectType!
  title: String!
  updatedAt: Timestamp
  usersAccessList: [User!]!
}

enum ObjectType {
  DASHBOARD
  DATA
  DATASOURCE
  FLOW
  GROUP_CHAT
  INDICATOR
  MAP
  PM
  TABLE
}

type OdataParams {
  host: String
  pass: String
  port: String
  tables: [String!]
  url: String
  user: String
}

input OdataParamsInp {
  host: String
  pass: String
  port: String
  tables: [String!]
  url: String
  user: String
}

type OlapAcl {
  olapRequest: Boolean
  panelsEdit: Boolean
  panelsRead: Boolean
}

type OlapChartLayer implements OlapLayer {
  analysis: Analysis
  chartProperties: OlapLayerChartProperties
  chartType: OlapChartType
  columns: [OlapRequestField!]
  cubeId: String
  drillAsidePanelId: String
  havingFilters: [FormulaToken!]
  height: Float
  hierarchy: OlapHierarchy
  id: UUID!
  limit: Int
  mapProperties: OlapLayerMapProperties
  offset: Int
  positionX: Float
  positionY: Float
  rows: [OlapRequestField!]
  scannerDrillFields: [String!]
  showTotal: Boolean
  showValueMeasureName: Boolean
  sorting: OlapLayerSorting
  styles: OlapLayerStyles
  tableProperties: OlapLayerTableProperties
  type: OlapLayerType
  valueFontColor: String
  valueFontSize: Int
  valuePostfix: String
  whereFilters: [FormulaToken!]
  width: Float
}

enum OlapChartType {
  BUBBLE
  CONFIGURABLE
  GRAPH
  MAP
  PIE
  RADAR
  SCANNER
  SCATTER
  TABLE
  VALUE
}

type OlapDashboard {
  analysis: DashboardAnalysis
  backgroundColor: String
  borderColor: String
  height: Int
  horizontalMargin: Int
  id: UUID!
  insertedAt: Timestamp
  layers: [OlapLayer!]
  maxWidth: Int
  minWidth: Int
  object: Object
  rowHeight: Int
  title: String!
  updatedAt: Timestamp
  verticalMargin: Int
  width: Int
  workspace: OlapDashboardWorkspace!
}

input OlapDashboardInput {
  analysis: DashboardAnalysisInput
  backgroundColor: String
  borderColor: String
  height: Int
  horizontalMargin: Int
  layers: [OlapLayerInput!]
  maxWidth: Int
  minWidth: Int
  rowHeight: Int
  title: String
  verticalMargin: Int
  width: Int
  workspace: OlapDashboardWorkspace
}

enum OlapDashboardWorkspace {
  FIXED
  UNLIMITED
}

type OlapFilterLayer implements OlapLayer {
  applyToAllElement: Boolean
  cubeId: String
  defaultSelectedValues: [String!]
  fieldId: String
  fieldValues: [String!]
  filterField: OlapRequestField
  filterVisType: FilterVisType
  height: Float
  id: UUID!
  positionX: Float
  positionY: Float
  relatedElements: [UUID!]
  type: OlapLayerType
  width: Float
}

enum OlapFontStyle {
  ITALIC
  NORMAL
}

enum OlapFontWeight {
  BOLD
  NORMAL
}

enum OlapGridType {
  COMBINED
  HORIZONTAL
  VERTICAL
}

type OlapHierarchy {
  fields: [OlapRequestField!]
  id: String
}

input OlapHierarchyInput {
  fields: [OlapRequestFieldInput!]
  id: String
}

interface OlapLayer {
  height: Float
  id: UUID!
  positionX: Float
  positionY: Float
  type: OlapLayerType
  width: Float
}

type OlapLayerAlias {
  alias: String
  fieldId: String
  hiddenAlias: String
  id: String
  name: String
}

input OlapLayerAliasInput {
  alias: String
  fieldId: String
  hiddenAlias: String
  id: String
  name: String
}

type OlapLayerAxis {
  color: String
  gridColor: String
  isLog: Boolean
  lineStyle: OlapLayerLineStyle
  logBase: Float
  textStyle: OlapLayerTextStyle
  x: OlapLayerDirectAxis
  y: OlapLayerDirectAxis
}

input OlapLayerAxisInput {
  color: String
  gridColor: String
  isLog: Boolean
  lineStyle: OlapLayerLineStyleInput
  logBase: Float
  textStyle: OlapLayerTextStyleInput
  x: OlapLayerDirectAxisInput
  y: OlapLayerDirectAxisInput
}

type OlapLayerBarFillStyle {
  color: String
  opacity: Float
}

input OlapLayerBarFillStyleInput {
  color: String
  opacity: Float
}

type OlapLayerChartProperties {
  sorting: OlapLayerSorting
}

input OlapLayerChartPropertiesInput {
  sorting: OlapLayerSortingInput
}

type OlapLayerDirectAxis {
  rotate: Float
  withAxisLine: Boolean
  withLabel: Boolean
  withName: Boolean
}

input OlapLayerDirectAxisInput {
  rotate: Float
  withAxisLine: Boolean
  withLabel: Boolean
  withName: Boolean
}

type OlapLayerGrid {
  color: String
  lineStyle: OlapLayerLineStyle
  type: OlapGridType
}

input OlapLayerGridInput {
  color: String
  lineStyle: OlapLayerLineStyleInput
  type: OlapGridType
}

input OlapLayerInput {
  fontStyle: OlapFontStyle
  positionY: Float
  cubeId: String
  textAlign: OlapTextAlign
  filterVisType: FilterVisType
  positionX: Float
  valueFontSize: Int
  chartType: OlapChartType
  id: UUID
  filterField: OlapRequestFieldInput
  hierarchy: OlapHierarchyInput
  showValueMeasureName: Boolean
  chartProperties: OlapLayerChartPropertiesInput
  fieldValues: [String!]
  type: OlapLayerType
  drillAsidePanelId: String
  applyToAllElement: Boolean
  whereFilters: [FormulaTokenInput!]
  rtx: [OlapLayerRtxDataInput!]
  sorting: OlapLayerSortingInput
  tableProperties: OlapLayerTablePropertiesInput
  textDecoration: OlapTextDecoration
  relatedElements: [UUID!]
  size: Int
  valuePostfix: String
  offset: Int
  color: String
  valueFontColor: String
  analysis: AnalysisInput
  defaultSelectedValues: [String!]
  rows: [OlapRequestFieldInput!]
  scannerDrillFields: [String!]
  columns: [OlapRequestFieldInput!]
  limit: Int
  height: Float
  styles: OlapLayerStylesInput
  width: Float
  text: String
  havingFilters: [FormulaTokenInput!]
  fieldId: String
  showTotal: Boolean
  mapProperties: OlapLayerMapPropertiesInput
  fontWeight: OlapFontWeight
}

type OlapLayerLegend {
  direction: LegendDirection
  linesCount: Int
  position: LegendPosition
  show: Boolean
}

input OlapLayerLegendInput {
  direction: LegendDirection
  linesCount: Int
  position: LegendPosition
  show: Boolean
}

type OlapLayerLineStyle {
  color: String
  opacity: Float
  type: OlapLineType
  width: Float
}

input OlapLayerLineStyleInput {
  color: String
  opacity: Float
  type: OlapLineType
  width: Float
}

type OlapLayerMap {
  color: String
  marks: [OlapLayerMark!]
  ranges: [OlapLayerRanges!]
  tooltip: OlapLayerTooltip
}

input OlapLayerMapInput {
  color: String
  marks: [OlapLayerMarkInput!]
  ranges: [OlapLayerRangesInput!]
  tooltip: OlapLayerTooltipInput
}

type OlapLayerMapProperties {
  center: [Float!]
  tile: String
  zoom: Float
}

input OlapLayerMapPropertiesInput {
  center: [Float!]
  tile: String
  zoom: Float
}

type OlapLayerMark {
  color: String
  filters: [OlapLayerMarkFilter!]
  position: String
  rtx: [OlapLayerRtxData!]
  showLine: Boolean
  type: String
  value: String
}

type OlapLayerMarkFilter {
  dimensions: [OlapLayerMarkFilterDimension!]
  measuresIds: [String!]
}

type OlapLayerMarkFilterDimension {
  id: String!
  index: Int!
  values: [String!]!
}

input OlapLayerMarkFilterDimensionInput {
  id: String!
  index: Int!
  values: [String!]!
}

input OlapLayerMarkFilterInput {
  dimensions: [OlapLayerMarkFilterDimensionInput!]
  measuresIds: [String!]
}

input OlapLayerMarkInput {
  color: String
  filters: [OlapLayerMarkFilterInput!]
  position: String
  rtx: [OlapLayerRtxDataInput!]
  showLine: Boolean
  type: String
  value: String
}

type OlapLayerMarkLine {
  category: String
  color: String
  label: String
  position: String
  type: OlapMarkLineType
  value: Float
}

input OlapLayerMarkLineInput {
  category: String
  color: String
  label: String
  position: String
  type: OlapMarkLineType
  value: Float
}

type OlapLayerPie {
  id: String
  innerRadius: Int
}

input OlapLayerPieInput {
  id: String
  innerRadius: Int
}

type OlapLayerPoint {
  barFill: OlapLayerBarFillStyle
  barStroke: OlapLayerShapeStyle
  fill: OlapLayerShapeStyle
  id: String
  marks: [OlapLayerMark!]
  stroke: OlapLayerShapeStyle
  tooltip: OlapLayerTooltip
}

input OlapLayerPointInput {
  barFill: OlapLayerBarFillStyleInput
  barStroke: OlapLayerShapeStyleInput
  fill: OlapLayerShapeStyleInput
  id: String
  marks: [OlapLayerMarkInput!]
  stroke: OlapLayerShapeStyleInput
  tooltip: OlapLayerTooltipInput
}

type OlapLayerRanges {
  color: String
  end: Float
  start: Float
}

input OlapLayerRangesInput {
  color: String
  end: Float
  start: Float
}

type OlapLayerRtxData {
  align: String
  children: [OlapLayerRtxItem!]!
  type: RtxDataType
}

input OlapLayerRtxDataInput {
  align: String
  children: [OlapLayerRtxItemInput!]
  type: RtxDataType
}

type OlapLayerRtxItem {
  bold: Boolean
  children: [OlapLayerRtxItemChild!]
  color: String
  element: OlapChartLayer
  fontSize: Float
  italic: Boolean
  linkPanelId: String
  text: String
  type: RtxItemType
  value: String
}

type OlapLayerRtxItemChild {
  text: String
}

input OlapLayerRtxItemChildInput {
  text: String
}

input OlapLayerRtxItemInput {
  bold: Boolean
  children: [OlapLayerRtxItemChildInput!]
  color: String
  element: OlapLayerInput
  fontSize: Float
  italic: Boolean
  linkPanelId: String
  text: String
  type: RtxItemType
  value: String
}

type OlapLayerSeria {
  cumulative: Boolean
  donutPadding: Int
  donutWidth: Int
  gain: Boolean
  growthRate: Boolean
  id: String
  innerRadius: Int
  lineStyle: OlapLayerLineStyle
  marks: [OlapLayerMark!]
  outerRadius: Int
  pointStyle: OlapLayerPoint
  showTrend: Boolean
  smooth: Boolean
  stack: String
  tooltip: OlapLayerTooltip
  trendLine: TrendLine
  type: OlapSeriaType
}

input OlapLayerSeriaInput {
  cumulative: Boolean
  donutPadding: Int
  donutWidth: Int
  gain: Boolean
  growthRate: Boolean
  id: String
  innerRadius: Int
  lineStyle: OlapLayerLineStyleInput
  marks: [OlapLayerMarkInput!]
  outerRadius: Int
  pointStyle: OlapLayerPointInput
  showTrend: Boolean
  smooth: Boolean
  stack: String
  tooltip: OlapLayerTooltipInput
  trendLine: TrendLineInput
  type: OlapSeriaType
}

type OlapLayerShapeStyle {
  color: String
  opacity: Float
  size: Float
}

input OlapLayerShapeStyleInput {
  color: String
  opacity: Float
  size: Float
}

type OlapLayerSorting {
  asc: Boolean
  type: String
}

input OlapLayerSortingInput {
  asc: Boolean
  type: String
}

type OlapLayerStyles {
  aliases: [OlapLayerAlias!]
  axis: OlapLayerAxis
  backgroundColor: String
  grid: OlapLayerGrid
  hGrid: OlapLayerVHGrid
  legend: OlapLayerLegend
  map: OlapLayerMap
  markLines: [OlapLayerMarkLine!]
  pie: OlapLayerPie
  points: [OlapLayerPoint!]
  series: [OlapLayerSeria!]
  seriesConfig: OlapLayerSeria
  sortingType: SortingType
  table: OlapLayerTable
  vGrid: OlapLayerVHGrid
  valueRounding: Int
  zooming: OlapLayerZooming
}

input OlapLayerStylesInput {
  aliases: [OlapLayerAliasInput!]
  axis: OlapLayerAxisInput
  backgroundColor: String
  grid: OlapLayerGridInput
  hGrid: OlapLayerVHGridInput
  legend: OlapLayerLegendInput
  map: OlapLayerMapInput
  markLines: [OlapLayerMarkLineInput!]
  pie: OlapLayerPieInput
  points: [OlapLayerPointInput!]
  series: [OlapLayerSeriaInput!]
  seriesConfig: OlapLayerSeriaInput
  sortingType: SortingType
  table: OlapLayerTableInput
  vGrid: OlapLayerVHGridInput
  valueRounding: Int
  zooming: OlapLayerZoomingInput
}

type OlapLayerTable {
  columnWidths: [TablePartSize!]
  horizontalPadding: Int
  id: String
  mergeCells: Boolean
  rowLines: [TablePartSize!]
  stickyHeader: Boolean
  stickySide: Boolean
  verticalPadding: Int
}

input OlapLayerTableInput {
  columnWidths: [TablePartSizeInput!]
  horizontalPadding: Int
  id: String
  mergeCells: Boolean
  rowLines: [TablePartSizeInput!]
  stickyHeader: Boolean
  stickySide: Boolean
  verticalPadding: Int
}

type OlapLayerTableProperties {
  showTotal: Boolean
}

input OlapLayerTablePropertiesInput {
  showTotal: Boolean
}

type OlapLayerTextStyle {
  color: String
  fontSize: Float
}

input OlapLayerTextStyleInput {
  color: String
  fontSize: Float
}

type OlapLayerTooltip {
  color: String
  filters: [OlapLayerMarkFilter!]
  position: String
  rtx: [OlapLayerRtxData!]
  type: String
}

input OlapLayerTooltipInput {
  color: String
  filters: [OlapLayerMarkFilterInput!]
  position: String
  rtx: [OlapLayerRtxDataInput!]
  type: String
}

enum OlapLayerType {
  CHART
  FILTER
  TEXT
}

type OlapLayerVHGrid {
  areas: Int
  show: Boolean
}

input OlapLayerVHGridInput {
  areas: Int
  show: Boolean
}

type OlapLayerZooming {
  horizontal: OlapLayerZoomingOpts
  vertical: OlapLayerZoomingOpts
}

input OlapLayerZoomingInput {
  horizontal: OlapLayerZoomingOptsInput
  vertical: OlapLayerZoomingOptsInput
}

type OlapLayerZoomingOpts {
  enabled: Boolean
  end: Float
  start: Float
}

input OlapLayerZoomingOptsInput {
  enabled: Boolean
  end: Float
  start: Float
}

enum OlapLineType {
  DASHED
  DOTTED
  SOLID
}

enum OlapMarkLineType {
  HORIZONTAL
  VERTICAL
}

enum OlapRequestAgg {
  ANYHEAVY
  ARG_MAX
  ARG_MIN
  AVG
  CALCULATED
  COUNT
  KURTPOP
  KURTSAMP
  MAX
  MEDIAN
  MIN
  NONE
  QUANTILE
  SKEWPOP
  SKEWSAMP
  SUM
  VAR_POP
  VAR_SAMP
}

type OlapRequestArg {
  columnId: String
  cubeId: String
  dataType: FieldDataType
  dateFormat: String
  label: String
  type: OlapRequestArgType!
  value: String
}

input OlapRequestArgInput {
  columnId: String
  cubeId: String
  dataType: FieldDataType
  dateFormat: String
  label: String
  type: OlapRequestArgType!
  value: String
}

enum OlapRequestArgType {
  COLUMN
  FLOAT
  INTEGER
  STRING
}

input OlapRequestConditionInput {
  field: OlapRequestFieldInput!
  value: String
}

type OlapRequestField {
  additionalCalc: AdditionalCalc
  agg: OlapRequestAgg!
  args: [OlapRequestArg!]
  calculatedFormula: [FormulaToken!]
  hierarchyId: String
  id: String!
  index: Int
  name: String
  showTotal: Boolean
  valueRounding: Int
}

input OlapRequestFieldInput {
  additionalCalc: AdditionalCalcInput
  agg: OlapRequestAgg!
  args: [OlapRequestArgInput!]
  calculatedFormula: [FormulaTokenInput!]
  hierarchyId: String
  id: String!
  index: Int
  name: String
  showTotal: Boolean
  valueRounding: Int
}

input OlapRequestInput {
  conditions: [OlapRequestConditionInput!]
  cubeId: String
  fields: [OlapRequestFieldInput!]
  format: OlapRequestType!
  havingFilters: [FormulaTokenInput!]
  limit: Int
  offset: Int
  scannerId: String
  whereFilters: [FormulaTokenInput!]
}

enum OlapRequestType {
  AXIS
  FLAT
}

type OlapResponse {
  data: Json
}

enum OlapSeriaType {
  BAR
  LINE
  SCATTER
}

enum OlapTextAlign {
  CENTER
  JUSTIFY
  LEFT
  RIGHT
}

enum OlapTextDecoration {
  LINE_THROUGH
  NONE
  UNDERLINE
}

type OlapTextLayer implements OlapLayer {
  color: String
  fontStyle: OlapFontStyle
  fontWeight: OlapFontWeight
  height: Float
  id: UUID!
  positionX: Float
  positionY: Float
  rtx: [OlapLayerRtxData!]
  size: Int
  text: String
  textAlign: OlapTextAlign
  textDecoration: OlapTextDecoration
  type: OlapLayerType
  width: Float
}

type Organisation {
  acl: Acl
  description: String
  email: String
  id: Int
  name: String
  private: Boolean
  url: String
}

type OseAcl {
  tablesEdit: Boolean
  tablesRead: Boolean
}

type OutDbParams {
  db: String
  dbType: DbType
  exportToDb: Boolean
  host: String
  pass: String
  port: String
  tableName: String
  title: String
  user: String
}

input OutDbParamsInput {
  db: String
  dbType: DbType
  exportToDb: Boolean
  host: String
  pass: String
  port: String
  tableName: String
  title: String
  user: String
}

type OutRestAuthParams {
  """ONLY BEARER FOR NOW"""
  authType: OutRestAuthType!

  """unused for now"""
  authUrl: String

  """usused for now"""
  login: String

  """unused for now"""
  password: String
  token: String
}

input OutRestAuthParamsInput {
  """ONLY BEARER FOR NOW"""
  authType: OutRestAuthType!

  """unused for now"""
  authUrl: String

  """usused for now"""
  login: String

  """unused for now"""
  password: String
  token: String
}

enum OutRestAuthType {
  BEARER
  NO_AUTH
}

enum OutRestConnectionType {
  HTTP
  HTTPS
}

type OutRestFilter {
  columnId: Int
  comparator: OutRestFilterComparator
  default: String

  """
  can be different datatypes. IDK what to do. Maybe only numberic fields?
  """
  lowerBoundry: String
  name: String
  required: Boolean!
  upperBoundry: String
}

enum OutRestFilterComparator {
  EQ
  GT
  GT_EQ
  LT
  LT_EQ
  MATCH
}

input OutRestFilterInput {
  columnId: Int
  comparator: OutRestFilterComparator
  default: String

  """
  can be different datatypes. IDK what to do. Maybe only numberic fields?
  """
  lowerBoundry: String
  name: String
  required: Boolean!
  upperBoundry: String
}

type OutRestHeader {
  name: String!

  """IDK WHAT COULD BE IN THERE"""
  value: OutRestHeaderValue
}

"""
- хедеры ответа: наименование, значение из списка (количество строк, время ответа, есть ли еще записи)
"""
input OutRestHeaderInput {
  name: String!
  value: OutRestHeaderValue
}

enum OutRestHeaderValue {
  AMOUNT
  HAS_MORE_RECORDS
  RESPONSE_TIME
}

type OutRestIdFilter {
  columnId: Int
  fieldType: OutRestParamsType
  required: Boolean!
}

input OutRestIdFilterInput {
  columnId: Int
  fieldType: OutRestParamsType
  required: Boolean!
}

type OutRestIntArgParams {
  default: Int
  lowerBound: Int
  required: Boolean!
  upperBound: Int
}

input OutRestIntArgParamsInput {
  default: Int
  lowerBound: Int
  required: Boolean!
  upperBound: Int
}

type OutRestOrder {
  columnsIds: [Int!]
  type: OutRestOrderType
}

input OutRestOrderInput {
  columnsIds: [Int!]
  type: OutRestOrderType
}

enum OutRestOrderType {
  ASC
  DESC
}

type OutRestParams {
  allowedIpAddresses: [String!]
  apiUri: String
  authParams: OutRestAuthParams
  connectionType: OutRestConnectionType
  filter: [OutRestFilter!]!
  idFilter: OutRestIdFilter
  limit: OutRestIntArgParams
  offset: OutRestIntArgParams
  order: OutRestOrder
  requestPerSecond: Int
  responseFormatting: [OutRestResponseFormatting!]
  responseHeaders: [OutRestHeader!]
  search: OutRestSearch
}

input OutRestParamsInput {
  allowedIpAddresses: [String!]

  """
  API URL. Should be like "/api/uri/example"
  """
  apiUri: String
  authParams: OutRestAuthParamsInput
  connectionType: OutRestConnectionType
  filter: [OutRestFilterInput!]!
  idFilter: OutRestIdFilterInput
  limit: OutRestIntArgParamsInput
  offset: OutRestIntArgParamsInput
  order: OutRestOrderInput
  requestPerSecond: Int
  responseFormatting: [OutRestResponseFormattingInput!]!
  responseHeaders: [OutRestHeaderInput!]!
  search: OutRestSearchInput
}

enum OutRestParamsType {
  ITEM
  LIST
}

type OutRestResponseFormatting {
  columnId: Int
  text: String
  type: OutRestResponseFormattingType
}

input OutRestResponseFormattingInput {
  columnId: Int
  text: String
  type: OutRestResponseFormattingType
}

enum OutRestResponseFormattingType {
  FIELD
  TEXT
}

type OutRestSearch {
  columnsIds: [Int!]
  required: Boolean!
}

input OutRestSearchInput {
  columnsIds: [Int!]
  required: Boolean!
}

enum Periodicity {
  CUSTOM
  DAY
  HOUR
  MONTH
  NONE
  QUARTER
  WEEK
}

enum PeriodicityType {
  DAYS
  HOURS
  MINUTES
  NEVER
  ONCE
}

type PmChecklist {
  description: String
  id: UUID!
  insertedAt: Timestamp
  tasks: [PmChecklistTask!]
  title: String!
  updatedAt: Timestamp
  userIds: [Int!]
}

type PmChecklistTask {
  description: String
  id: UUID!
  planFinishTime: Timestamp
  planStartTime: Timestamp
  status: PmChecklistTaskStatus!
  title: String!
  userIds: [Int!]
}

enum PmChecklistTaskStatus {
  APPROOVED
  DONE
  IN_PROGRESS
  NEW
}

input PositionInput {
  value: Int
}

type Progress {
  allCount: Int!
  doneCount: Int!
  label: String!
}

enum ProgressStatus {
  CREATED
  DONE
  FAILED
  IN_PROGRESS
  STOPPED
}

type ProjectManagement {
  checklists: [PmChecklist!]
  id: UUID!
  insertedAt: Timestamp
  object: Object
  title: String!
  updatedAt: Timestamp
}

type Regression {
  models: [RegressionModel!]
  predictSize: Int!
}

input RegressionCalculatedVarInput {
  agg: OlapRequestAgg
  coef: Float!
  coefMax: Float!
  coefMin: Float!
  func: RegressionVarFunc!
  lagsCount: Int!
  relevant: Boolean!
  seriaId: String!
}

input RegressionCalculatedVarV1Input {
  agg: OlapRequestAgg!
  coef: Float!
  coefMax: Float!
  coefMin: Float!
  elementId: String!
  func: RegressionVarFunc!
  lagsCount: Int!
  name: String!
  relevant: Boolean!
  seriaId: String!
}

input RegressionInput {
  models: [RegressionModelInput!]
  predictSize: Int!
}

type RegressionModel {
  intercept: Float
  predictId: String!
  r2: Float!
  relevant: Boolean!
  seriaId: String!
  significanceLevel: Float!
  vars: [RegressionVar!]!
}

input RegressionModelInput {
  intercept: Float
  predictId: String!
  r2: Float!
  relevant: Boolean!
  seriaId: String!
  significanceLevel: Float!
  vars: [RegressionCalculatedVarInput!]!
}

type RegressionModelV1 {
  elementId: String
  intercept: Float
  predictId: String!
  r2: Float!
  relevant: Boolean!
  seriaId: String!
  significanceLevel: Float!
  vars: [RegressionVarV1!]!
}

input RegressionModelV1Input {
  elementId: String
  intercept: Float
  predictId: String!
  r2: Float!
  relevant: Boolean!
  seriaId: String!
  significanceLevel: Float!
  vars: [RegressionCalculatedVarV1Input!]!
}

input RegressionSeriaInput {
  id: String!
  seria: [Float!]!
}

type RegressionVar {
  coef: Float!
  coefMax: Float!
  coefMin: Float!
  func: RegressionVarFunc!
  lagsCount: Int!
  relevant: Boolean!
  seriaId: String!
}

enum RegressionVarFunc {
  CUBE
  LN
  NONE
  SQRT
  SQUARE
}

input RegressionVarInput {
  func: RegressionVarFunc!
  lagsCount: Int!
  seriaId: String!
}

type RegressionVarV1 {
  agg: OlapRequestAgg!
  coef: Float!
  coefMax: Float!
  coefMin: Float!
  elementId: String!
  func: RegressionVarFunc!
  lagsCount: Int!
  name: String!
  relevant: Boolean!
  seriaId: String!
}

enum RequestType {
  GET
  POST
}

type RestHttpAnswer {
  body: String
  code: Int
}

type RestParams {
  apiKeyName: String
  apiKeyValue: String
  authMode: AuthMode
  authTokenKeys: [String!]
  authTtl: Float
  authType: AuthType
  authUrl: String
  bearerToken: String
  delay: Float
  endpoints: [RestParamsEndpoint!]
  headers: [RestParamsHeader!]
  login: String
  loginFieldname: String
  oauth20Prefix: String
  oauth20Token: String
  pass: String
  passFieldname: String
  refreshTokenFieldname: String
  refreshTokenKeys: [String!]
  refreshUrl: String
  timeout: Float
  url: String
}

type RestParamsEndpoint {
  args: String
  dateLimitType: DateLimitType
  id: String
  limit: Int
  limitArgName: String
  limitOffsetType: LOType
  offset: Int
  offsetArgName: String
  offsetStopValue: Int
  pageArgName: String
  pageEnd: Int
  pageRowCount: Int
  pageStart: Int
  pagination: Boolean
  requestType: RequestType
  resultArrayKeys: [String!]
  stopOnLesslimit: Boolean
  urlPostfix: String
}

input RestParamsEndpointInp {
  args: String
  dateLimitType: DateLimitType
  id: String
  limit: Int
  limitArgName: String
  limitOffsetType: LOType
  offset: Int
  offsetArgName: String
  offsetStopValue: Int
  pageArgName: String
  pageEnd: Int
  pageRowCount: Int
  pageStart: Int
  pagination: Boolean
  requestType: RequestType
  resultArrayKeys: [String!]
  stopOnLesslimit: Boolean
  urlPostfix: String
}

type RestParamsHeader {
  name: String
  value: String
}

input RestParamsHeaderInp {
  name: String
  value: String
}

input RestParamsInp {
  apiKeyName: String
  apiKeyValue: String
  authMode: AuthMode
  authTokenKeys: [String!]
  authTtl: Float
  authType: AuthType
  authUrl: String
  bearerToken: String
  delay: Float
  endpoints: [RestParamsEndpointInp!]
  headers: [RestParamsHeaderInp!]
  login: String
  loginFieldname: String
  oauth20Prefix: String
  oauth20Token: String
  pass: String
  passFieldname: String
  refreshTokenFieldname: String
  refreshTokenKeys: [String!]
  refreshUrl: String
  timeout: Float
  url: String
}

enum ResultType {
  DATE
  NUMBER
  STRING
}

type Role {
  dashboardRead: Boolean
  dashboardWrite: Boolean
  datasourceRead: Boolean
  datasourceWrite: Boolean
  description: String
  etlRead: Boolean
  etlWrite: Boolean
  externalSystems: [ExternalSystem!]!
  folderId: Int!
  id: Int!
  indicatorsRead: Boolean
  indicatorsWrite: Boolean
  olapschemaRead: Boolean
  olapschemaWrite: Boolean
  rolesRead: Boolean
  rolesWrite: Boolean
  title: String!
  users: [User!]!
}

type RootMutationType {
  """Update connection"""
  updateConnection(id: Int, joinType: JoinType, leftTableFieldId: String, leftTableId: Int, rightTableFieldId: String, rightTableId: Int): Connection

  """Create indicator"""
  createIndicator(displayColumnIds: [String!], displayFKeyId: String, displayTableId: Int, folderId: Int, formula: [FormulaTokenInput!], periodicity: Periodicity, periodicityDays: Int, showCountedFormula: Boolean, sortType: SortType, sortValue: Float, sortValueType: SortValueType, title: String!): Indicator

  """Delete datasources"""
  deleteDatasource(id: Int!): String

  """Create hierarchy"""
  createHierarchy(tableId: Int!, title: String!): Hierarchy

  """Update project_management"""
  projectManagementUpdate(id: UUID!, title: String!): ProjectManagement

  """Remove external_system from role"""
  removeExternalSystemFromRole(externalSystemId: Int!, roleId: Int!): String

  """Create folder external_system"""
  createFolderExternalSystem(folderId: Int!, redirectUri: String, title: String!): ExternalSystem

  """Update checklist"""
  pmChecklistUpdate(description: String, id: UUID!, title: String, userIds: [Int!]): PmChecklist

  """Invite user to orgfolder"""
  inviteUserToOrgfolder(folderId: Int!, userId: Int!): String

  """Update data_table_field consider_search"""
  dataTableFieldUpdateConsiderSearch(considerSearch: Boolean!, id: UUID!): DataTableField

  """Run step"""
  runStep(stepId: Int!): String

  """Add user to user_group"""
  addUserToUserGroup(userGroupId: Int!, userId: Int!): String

  """Create folder"""
  createFolder(folderId: Int, title: String!): Folder

  """Calculate join"""
  calculateJoin(joinId: Int!, joinType: JoinType!, leftStepColumnId: Int!, leftStepId: Int!, rightStepColumnId: Int!, rightStepId: Int!): Step

  """update user profile"""
  profileUpdate(firstName: String, lastName: String, name: String): User

  """Create project_management"""
  projectManagementCreate(folderId: Int!, title: String!): ProjectManagement

  """Create organisation"""
  organisationsCreate(description: String, email: String, name: String!, private: Boolean, url: String!): Organisation

  """update checklist task"""
  pmChecklistUpdateTask(checklistId: UUID!, description: String, planFinishTime: Timestamp, planStartTime: Timestamp, status: PmChecklistTaskStatus, taskId: UUID!, title: String, userIds: [Int!]): PmChecklist

  """Remove external_system from user_group"""
  removeExternalSystemFromUserGroup(externalSystemId: Int!, groupId: Int!): String

  """Update map_layer"""
  mapLayerUpdate(id: UUID!, mapLayerStyles: MapLayerStylesInp, modal: MapLayerModalInp, position: Int, title: String, tooltip: MapLayerTooltipInp, visible: Boolean): MapLayer

  """Update object"""
  updateObject(attachmentId: String, folderId: Int, id: String!, title: String): Object

  """Create datasource"""
  createDatasource(dbParams: DbParamsInp, eisParams: EisParamsInp, folderId: Int, ftpParams: FtpParamsInp, odataParams: OdataParamsInp, periodicityType: PeriodicityType, periodicityValue: Float, restParams: RestParamsInp, sourceType: SourceType, title: String): Datasource

  """Import data_table"""
  dataTableImport(dataTableId: UUID!, file: Upload): DataTable

  """Refresh session"""
  sessionUpdate(refreshToken: UUID!): Session

  """generate map private token"""
  mapGenPrivateToken(id: UUID!): Map

  """Delete organisation"""
  organisationsDelete(id: Int!): Boolean

  """remove table from memory"""
  removeFromMemory(id: Int!): Table

  """Take away object access"""
  takeAwayObjectAccess(objectId: String!, userGroupId: Int, userId: Int): String

  """Set map_layer filter"""
  setMapLayerFilter(filter: [FormulaTokenInput!], id: UUID!): MapLayer

  """load table to memory"""
  loadToMemory(id: Int!): Table

  """Unshare folder"""
  unshareFolder(id: Int!): String

  """Get total column stats"""
  getTotalColumnStats(columnIds: [Int!]): [ColumnStat!]

  """Delete attachment"""
  attachmentDelete(id: UUID): String

  """Update hierarchy"""
  updateHierarchy(description: String, dims: [HierarchyDimInput!], id: Int!, isInvisible: Boolean, isOpened: Boolean, position: Int, title: String): Hierarchy

  """Update step"""
  updateStep(dateColumn: String, exportToMadd: Boolean, fullUpdate: Boolean, id: Int!, outDbParams: [OutDbParamsInput!], outRestParams: [OutRestParamsInput!], periodicity: Int, positionX: Int, positionY: Int, title: String): Step

  """Update folder external_system"""
  updateFolderExternalSystem(id: Int!, redirectUri: String, title: String!): ExternalSystem

  """Create data_table_row"""
  dataTableRowCreate(dataTableId: UUID!): DataTableRow

  """Delete checklist"""
  pmChecklistDelete(id: UUID!): String

  """Create data_table"""
  dataTableCreate(folderId: Int!, title: String!): DataTable

  """Delete hierarchy"""
  deleteHierarchy(id: Int!): String

  """Update data_table"""
  dataTableUpdate(description: String, id: UUID!, mapCenter: [Float!], mapLayerStyles: MapLayerStylesInp, mapZoom: Float, tablePositionType: TablePositionType, tablePositionX: Int, tablePositionY: Int, tileLayerLink: String, title: String, tooltip: MapLayerTooltipInp): DataTable

  """Delete indicator"""
  deleteIndicator(id: Int!): String

  """Sign in"""
  sessionCreate(email: String!, password: String!): Session

  """Create data_table_field"""
  dataTableFieldCreate(dataTableId: UUID!, title: String, width: Int): DataTableField

  """Update data_table_field field_catalog_id"""
  dataTableFieldUpdateFieldCatalogId(fieldCatalogId: String, id: UUID!): DataTableField

  """Update indicator"""
  updateIndicator(displayColumnIds: [String!], displayFKeyId: String, displayTableId: Int, formula: [FormulaTokenInput!], id: Int!, periodicity: Periodicity, periodicityDays: Int, showCountedFormula: Boolean, sortType: SortType, sortValue: Float, sortValueType: SortValueType, title: String!): Indicator

  """Add external_system to user_group"""
  addExternalSystemToUserGroup(externalSystemId: Int!, groupId: Int!): String

  """Update data_table_row field"""
  dataTableRowUpdate(catalogValue: [String!], coordinatesValue: CoordsInp, dataTableFieldId: UUID!, dataTableId: UUID!, dateValue: [Timestamp!], datetimeValue: [Timestamp!], fileValue: [String!], numberValue: [Float!], rowId: UUID!, stringValue: [String!], userEnteredValue: [String!]): DataTableRowField

  """Update data_table_field multi_input"""
  dataTableFieldUpdateMultiInput(id: UUID!, multiInput: Boolean!): DataTableField

  """add task to checklist"""
  pmChecklistAddTask(checklistId: UUID!, title: String!): PmChecklist

  """Create map_layer"""
  mapLayerCreate(dataTableId: UUID!, mapId: UUID!, title: String, visible: Boolean): MapLayer

  """Create dashboard"""
  olapDashboardCreate(dashboard: OlapDashboardInput!, folderId: Int): OlapDashboard

  """Remove cube_filter from user_group"""
  removeCubeFilterFromUserGroup(cubeId: Int!, userGroupId: Int!): [CubeFilter!]

  """Update organisation"""
  organisationsUpdate(description: String, email: String, id: Int!, name: String!, private: Boolean, url: String!): Organisation

  """auth_provider get authorize code"""
  authProviderAuthorize(clientId: String!, redirectUri: String!): String!

  """Create change"""
  createChange(changeCaseTypeInput: ChangeCaseTypeInput, changeType: ChangeType, codecInput: CodecInput, columnId: Int, columnIds: [Int!], dataTypeInput: DataTypeInput, includeInput: IncludeInput, positionInput: PositionInput, stepId: Int!, titleInput: TitleInput, unionColumnsInput: UnionColumnsInput, widthInput: WidthInput): Change

  """stop datasource import"""
  stopImport(datasourceId: Int!, tableId: String!): String

  """Add or replace cube_filter to user_group"""
  addOrReplaceCubeFilterToUserGroup(cubeFilter: CubeFilterInput!, userGroupId: Int!): [CubeFilter!]

  """Update flow"""
  updateFlow(id: Int!, title: String): Flow

  """import file"""
  importFile(file: Upload, flowId: Int!, positionX: Int, positionY: Int): [Step!]

  """Update folder user_group"""
  updateFolderUserGroup(description: String, id: Int!, title: String!): UserGroup

  """Update data_table_field default_value"""
  dataTableFieldUpdateDefaultValue(defaultValue: [String!], id: UUID!): DataTableField

  """Delete change"""
  deleteChange(id: Int!): [Column!]

  """Create step"""
  createStep(flowId: Int!, joinType: JoinType, positionX: Int, positionY: Int, sourceStepId: Int, sourceStepIds: [Int!], stepType: StepType!, title: String): Step

  """Create checklist"""
  pmChecklistCreate(description: String, projectManagementId: UUID!, title: String!, userIds: [Int!]): PmChecklist

  """Get csv export link"""
  getCsvExportLink(stepId: Int!): String

  """Delete folder user_group"""
  deleteFolderUserGroup(id: Int!): String

  """send user invite email"""
  sendInviteEmail(email: String!, folderId: Int!): User

  """Update data_table_field validation"""
  dataTableFieldUpdateValidation(id: UUID!, validation: DataTableFieldValidationInput): DataTableField

  """remove map public token"""
  mapRemovePublicToken(id: UUID!): Map

  """Create OSE table"""
  createOseTable(indicatorId: Int!): String

  """Set join steps"""
  setJoinSteps(joinId: Int!, leftStepId: Int, rightStepId: Int): Step

  """Remove role from user_group"""
  removeRoleFromUserGroup(roleId: Int!, userGroupId: Int!): String

  """Create column"""
  createColumn(formula: [FormulaTokenInput!]!, stepId: Int!, title: String!): Column

  """Remove user from user_group"""
  removeUserFromUserGroup(userGroupId: Int!, userId: Int!): String

  """Update dashboard"""
  olapDashboardUpdate(dashboard: OlapDashboardInput!, id: UUID!): OlapDashboard

  """Update data_table_field field_type"""
  dataTableFieldUpdateFieldType(fieldType: DataTableFieldType!, id: UUID!): DataTableField

  """Export Step to MADD"""
  exportStepToMadd(id: Int!): String

  """Create connection"""
  createConnection(joinType: JoinType, leftTableFieldId: String, leftTableId: Int, rightTableFieldId: String, rightTableId: Int): Connection

  """Update data_table_field uniq"""
  dataTableFieldUpdateUniq(id: UUID!, uniq: Boolean!): DataTableField

  """Create map"""
  mapCreate(folderId: Int!, title: String!): Map

  """Update data_table_field required"""
  dataTableFieldUpdateRequired(id: UUID!, required: Boolean!): DataTableField

  """Add steps to union"""
  addStepsToUnion(stepIds: [Int!], unionId: Int!): Step

  """Remove role from user"""
  removeRoleFromUser(roleId: Int!, userId: Int!): String

  """Update data_table_field is_video_link"""
  dataTableFieldUpdateIsVideoLink(id: UUID!, isVideoLink: Boolean!): DataTableField

  """remove step from union"""
  removeStepFromUnion(stepId: Int!, unionId: Int!): Step

  """Update folder role"""
  updateFolderRole(dashboardRead: Boolean, dashboardWrite: Boolean, datasourceRead: Boolean, datasourceWrite: Boolean, description: String, etlRead: Boolean, etlWrite: Boolean, id: Int!, indicatorsRead: Boolean, indicatorsWrite: Boolean, olapschemaRead: Boolean, olapschemaWrite: Boolean, rolesRead: Boolean, rolesWrite: Boolean, title: String): Role

  """Delete map_layer"""
  mapLayerDelete(id: UUID!): String

  """Unpin object"""
  unpinObject(id: String!): String

  """remove map private token"""
  mapRemovePrivateToken(id: UUID!): Map

  """Add external_system to role"""
  addExternalSystemToRole(externalSystemId: Int!, roleId: Int!): String

  """Sign out"""
  sessionDelete: Boolean

  """Delete connection"""
  deleteConnection(id: Int): String

  """Uninvite user from orgfolder"""
  uninviteUserFromOrgfolder(folderId: Int!, userId: Int!): String

  """Update field"""
  updateField(description: String, fieldType: FieldType, id: String!, isFKey: Boolean, isInvisible: Boolean, isLink: Boolean, position: Int, postfix: String, title: String): Field

  """Update datasource"""
  updateDatasource(dbParams: DbParamsInp, eisParams: EisParamsInp, ftpParams: FtpParamsInp, id: Int!, odataParams: OdataParamsInp, periodicityType: PeriodicityType, periodicityValue: Float, restParams: RestParamsInp, sourceType: SourceType, title: String): Datasource

  """Update data_table_field is_link"""
  dataTableFieldUpdateIsLink(id: UUID!, isLink: Boolean!): DataTableField

  """Delete project_management"""
  projectManagementDelete(id: UUID!): String

  """Give folder access"""
  giveFolderAccess(folderId: Int!, userGroupId: Int, userId: Int): String

  """Set where filter"""
  setWhereFilter(stepId: Int!, whereCond: [FormulaTokenInput!]): Step

  """Delete step"""
  deleteStep(id: Int!): String

  """Pin object"""
  pinObject(id: String!): String

  """Create attachment"""
  attachmentCreate(file: Upload): Attachment

  """Take away folder access"""
  takeAwayFolderAccess(folderId: Int!, userGroupId: Int, userId: Int): String

  """Open folder"""
  openFolder(id: Int!, pinnedFolderId: Int): Folder

  """Update map"""
  mapUpdate(center: [Float!], id: UUID!, tileLayerLink: String, zoom: Float): Map

  """Update data_table_field title"""
  dataTableFieldUpdateTitle(id: UUID!, title: String): DataTableField

  """add_default_panel_to_folder"""
  addDefaultPanelToFolder(folderId: Int!, panelId: UUID!, userId: Int!): String

  """init datasource import"""
  initImport(datasourceId: Int!, tableId: String!): String

  """Delete folder role"""
  deleteFolderRole(id: Int!): String

  """Delete flow"""
  deleteFlow(id: Int!): String

  """Update folder"""
  updateFolder(folderId: Int, id: Int!, title: String): Folder

  """remove task from checklist"""
  pmChecklistRemoveTask(checklistId: UUID!, taskId: UUID!): PmChecklist

  """remove_default_panel_from_folder"""
  removeDefaultPanelFromFolder(folderId: Int!, panelId: UUID!, userId: Int!): String

  """Add step to union"""
  addStepToUnion(stepId: Int!, unionId: Int!): Step

  """Set ext_sys group params"""
  setExternalSystemGroupParams(externalSystemId: Int!, groupId: Int!, params: [ExternalSystemParamsInp!]): [ExternalSystemParams!]

  """Update data_table_field width"""
  dataTableFieldUpdateWidth(id: UUID!, width: Int): DataTableField

  """Export Step to MADD data"""
  exportStepToMaddData(id: Int!): String

  """Close folder"""
  closeFolder(id: Int!, pinnedFolderId: Int): String

  """generate map public token"""
  mapGenPublicToken(id: UUID!): Map

  """Update data_table_field position"""
  dataTableFieldUpdatePosition(id: UUID!, position: Int!): [DataTableField!]

  """Delete dashboard"""
  olapDashboardDelete(id: UUID!): Boolean

  """Add role to user_group"""
  addRoleToUserGroup(roleId: Int!, userGroupId: Int!): String

  """Unpin folder"""
  unpinFolder(folderId: Int!): String

  """Create folder user_group"""
  createFolderUserGroup(description: String, folderId: Int!, title: String!): UserGroup

  """Set ext_sys role params"""
  setExternalSystemRoleParams(externalSystemId: Int!, params: [ExternalSystemParamsInp!], roleId: Int!): [ExternalSystemParams!]

  """Share folder"""
  shareFolder(id: Int!): String

  """Delete steps"""
  deleteSteps(ids: [Int!]): String

  """Pin folder"""
  pinFolder(folderId: Int!): Folder

  """Close all folders"""
  closeAllFolders(exceptIds: [Int!]): String

  """Get duplicates"""
  getDuplicates(stepId: Int!): [[Int!]!]

  """Delete data_table_field"""
  dataTableFieldDelete(id: UUID!): String

  """Export Step"""
  exportStep(db: String, dbType: DbType, host: String, id: Int!, pass: String, port: String, tableName: String, user: String): String

  """Add role to user"""
  addRoleToUser(roleId: Int!, userId: Int!): String

  """Update table"""
  updateTable(cubeDescription: String, cubeTitle: String, description: String, id: Int!, isInvisible: Boolean, isOpened: Boolean, positionX: Int, positionY: Int, tableType: TableType, title: String): Table

  """Create flow"""
  createFlow(folderId: Int, title: String!): Flow

  """Update data_table_field show_in_table"""
  dataTableFieldUpdateShowInTable(id: UUID!, showInTable: Boolean!): DataTableField

  """Delete folder"""
  deleteFolder(id: Int!): String

  """Delete folder external_system"""
  deleteFolderExternalSystem(id: Int!): String

  """Create folder role"""
  createFolderRole(dashboardRead: Boolean, dashboardWrite: Boolean, datasourceRead: Boolean, datasourceWrite: Boolean, description: String, etlRead: Boolean, etlWrite: Boolean, folderId: Int!, indicatorsRead: Boolean, indicatorsWrite: Boolean, olapschemaRead: Boolean, olapschemaWrite: Boolean, rolesRead: Boolean, rolesWrite: Boolean, title: String!): Role

  """Delete data_table_row"""
  dataTableRowDelete(dataTableId: UUID!, rowId: UUID!): String

  """Give object access"""
  giveObjectAccess(objectId: String!, userGroupId: Int, userId: Int): String
}

type RootQueryType {
  """Get column values"""
  getColumnValues(columnId: Int!, limit: Int, offset: Int, search: String): [String!]

  """Scanner drill"""
  scannerDrill(cubeId: String!, limit: Int = 1000, offset: Int = 0, scanDate: String!, scannerId: String!): [[String!]!]

  """Get objects"""
  getObjects(limit: Int = 50, offset: Int = 0, search: String, types: [ObjectType!]): [Object!]

  """Get dashboards"""
  olapDashboardGet(ids: [UUID!], limit: Int = 20, offset: Int, search: String): [OlapDashboard!]

  """Get data_table_fields"""
  dataTableFieldGet(dataTableId: UUID!, id: UUID): [DataTableField!]

  """Get users"""
  getUsers(id: Int, limit: Int, offset: Int, search: String): [User!]

  """Get hierarchies"""
  getHierarchies(ids: [Int!]): [Hierarchy!]

  """Get tables"""
  getTables(ids: [Int!]): [Table!]

  """Get profile"""
  profileGet: User

  """Get data_table"""
  dataTableGet(id: UUID!): DataTable

  """Get steps"""
  getSteps(datasourceId: Int, flowId: Int, ids: [Int!], limit: Int = 100, offset: Int = 0): [Step!]

  """Get indicators autocomplete"""
  getIndicatorsAutocomplete(search: String!, tableId: Int, types: [IndicatorsAutocompleteType!]): [IndicatorsAutocomplete!]

  """Get functions list"""
  getFunctions: [Function!]

  """Get current user organisations"""
  organisationsMyGet: [Organisation!]

  """ls ftp dir"""
  lsFtpDir(host: String, limit: Int = 100, offset: Int = 0, pass: String, path: String = "/", port: String, regexp: String = ".*", user: String): [FtpEnity!]

  """Get field values"""
  getFieldValues(fieldId: String!, limit: Int, offset: Int, search: String): [String!]

  """Get map"""
  mapGet(id: UUID!): Map

  """Get data_table_rows"""
  dataTableGetRows(dataTableId: UUID!, id: UUID, limit: Int!, offset: Int!, search: String): [DataTableRow!]

  """Get flows"""
  getFlows(ids: [Int!], limit: Int = 2000, offset: Int = 0, orderBy: String, search: String): [Flow!]

  """Get regression models"""
  regressionModelGet(predictId: String!, seriaId: String!, series: [RegressionSeriaInput!]!, vars: [RegressionVarInput!]!): RegressionModel

  """Get columns"""
  getColumns(ids: [Int!], limit: Int = 20, offset: Int = 0, orderBy: String, search: String, stepId: Int): [Column!]

  """test rest auth"""
  testRestAuth(authUrl: String, login: String, loginFieldname: String, pass: String, passFieldname: String): RestHttpAnswer

  """for socket_message to appear in schema"""
  getSocketMessage: SocketMessage

  """test rest refresh"""
  testRestRefresh(refreshToken: String, refreshTokenFieldname: String, refreshUrl: String): RestHttpAnswer

  """Get shared data_table row"""
  dataTableGetRowShared(id: UUID, layerId: UUID!): DataTableRow

  """Get checklists"""
  pmChecklistsGet(id: UUID, pmId: UUID): [PmChecklist!]

  """Get datasources"""
  getDatasources(ids: [Int!]): [Datasource!]

  """Get folder roles"""
  getFolderRoles(folderId: Int!): [Role!]

  """for entity_created to appear in schema"""
  getEntityCreated: EntityCreated

  """Get project_management"""
  projectManagementGet(id: UUID!): ProjectManagement

  """check_where_formula"""
  checkWhereFormula(whereCond: [FormulaTokenInput!]!): String

  """Get olap_cube autocomplete"""
  getOlapCubeAutocomplete(search: String!, tableId: Int!, types: [AutocompleteType!]): [Autocomplete!]

  """Get folder trees"""
  getFolderTree(id: Int): Trees

  """get db tables"""
  getDbTables(db: String!, dbType: DbType!, host: String!, limit: Int, offset: Int, pass: String!, port: String!, search: String, user: String!): [DbTable!]

  """Get indicators"""
  getIndicators(ids: [Int!]): [Indicator!]

  """Get autocomplete"""
  getEtlStepAutocomplete(search: String!, stepId: Int!, types: [AutocompleteType!]): [Autocomplete!]

  """Get folder user_groups"""
  getFolderUserGroups(folderId: Int!): [UserGroup!]

  """auth_provider get_rights"""
  authProviderGetRights: [ExternalSystemParams!]

  """Get indicator base rating"""
  getIndicatorBaseRating(displayColumnIds: [String!], displayFKeyId: String, displayTableId: Int, formula: [FormulaTokenInput!], showCountedFormula: Boolean, sortType: SortType = ASC, sortValue: Float, sortValueType: SortValueType = VALUE): [[String!]!]

  """get odata tables"""
  getOdataTables(host: String!, limit: Int, offset: Int, pass: String, port: String, search: String, url: String!, user: String): [String!]

  """Get shared map"""
  mapGetShared: MapShared

  """OLAP request"""
  olapRequest(request: OlapRequestInput!): OlapResponse

  """chech_indicator_formula"""
  chechIndicatorFormula(formula: [FormulaTokenInput!]): String

  """Get folder external_systems"""
  getFolderExternalSystems(folderId: Int!): [ExternalSystem!]

  """Get column stats by formula"""
  getColumnStatsByFormula(formula: [FormulaTokenInput!]!, stepId: Int!): [ColumnStat!]
}

enum RtxDataType {
  PARAGRAPH
}

enum RtxItemType {
  ELEMENT
  SLICE
  TEXT
  VAR
}

type Session {
  expireAt: Timestamp!
  refreshToken: UUID!
  token: UUID!
  user: User!
}

type SharedAcl {
  foldersEdit: Boolean
  foldersRead: Boolean
  objectsEdit: Boolean
  objectsRead: Boolean
  organisationCreate: Boolean
}

union SocketMessage = StepProgress | DatasourceState | DatasourceProgress | ChatOnline | ChatUser | ChatMessage | ChatRoom

enum SortingType {
  DIMENSION_ASC
  DIMENSION_DESC
  MEASURE_ASC
  MEASURE_DESC
}

enum SortType {
  ASC
  DESC
}

enum SortValueType {
  REFERENCE
  REFERENCE_AVG
  VALUE
}

enum SourceType {
  CLICKHOUSE
  DB
  EIS
  FTP
  ODATA
  REST
}

type Step {
  changes: [Change!]!
  rightStepColumnId: Int
  updatedAt: Timestamp
  whereCond: [FormulaToken!]
  outDbParams: [OutDbParams!]!
  leftUnmatchedKeys: [String!]
  originalTitle: String
  leftColumns: [Column!]
  leftStepColumnId: Int
  insertedAt: Timestamp
  stepIds: [Int!]!
  datasource: Datasource
  exportToMadd: Boolean
  rightInKeys: Int
  rightColumns: [Column!]
  leftNotInKeys: Int
  rightStepId: Int
  originalSchemaTitle: String
  rightNotInRecords: Int
  dupGroupsCount: Int
  rightInRecords: Int
  fullUpdate: Boolean
  leftStepId: Int
  joinType: JoinType
  flow: Flow
  leftNotInRecords: Int
  matchedKeys: [String!]
  outRestParams: [OutRestParams!]!
  leftInKeys: Int
  title: String!
  dateColumn: String
  columnsCount: Int!
  id: Int!
  positionX: Int
  tableName: String
  rightNotInKeys: Int
  periodicity: Int
  stepType: StepType!
  dupColumnsCount: Int
  rightUnmatchedKeys: [String!]
  positionY: Int
  leftInRecords: Int
}

type StepProgress {
  processes: [Progress!]
  status: ProgressStatus
  stepId: Int
}

enum StepType {
  AGG
  JOIN
  OUT
  PIVOT
  SOURCE
  TRANSFORM
  UNION
}

type Table {
  connections: [Connection!]
  cubeDescription: String
  cubeTitle: String
  description: String
  fields: [Field!]
  hierarchies: [Hierarchy!]
  id: Int!
  inMemory: Boolean
  insertedAt: Timestamp
  isInvisible: Boolean
  isOpened: Boolean
  object: Object
  positionX: Int
  positionY: Int
  tableType: TableType
  title: String
  updatedAt: Timestamp
}

type TablePartSize {
  id: String
  value: Int
}

input TablePartSizeInput {
  id: String
  value: Int
}

enum TablePositionType {
  BOTTOM
  LEFT
  RIGHT
  TOP
}

enum TableType {
  DIMENSION
  FACT
}

"""Unix timestamp"""
scalar Timestamp

input TitleInput {
  value: String!
}

enum TokenType {
  BRACKET
  DATA
  EQ_OPERATOR
  FUNC
  IN_OPERATOR
  LIST
  LOGIC_OPERATOR
  NUMBER
  OPERATOR
  SPACE
  STRING
}

type Tree {
  folders: [Folder!]!
  objects: [Object!]!
}

type Trees {
  pinnedTree: Tree!
  tree: Tree!
}

type TrendLine {
  color: String
  opacity: Float
}

input TrendLineInput {
  color: String
  opacity: Float
}

input UnionColumnsInput {
  value: [Int!]
}

"""Represents an uploaded file."""
scalar Upload

type User {
  acl: Acl
  avatar: String
  email: String!
  firstName: String
  id: Int!
  lastName: String
  name: String
  orgQuota: Int
  roles: [Role!]
  status: UserStatus
}

type UserGroup {
  cubeFilters: [CubeFilter!]!
  description: String
  externalSystems: [ExternalSystem!]!
  folderId: Int!
  id: Int!
  roles: [Role!]!
  title: String!
  users: [User!]!
}

enum UserStatus {
  EMAIL_SENT
  REGISTRATION_DONE
}

"""UUID scalar"""
scalar UUID

input WidthInput {
  value: Int
}
